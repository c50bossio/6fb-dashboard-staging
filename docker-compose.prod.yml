# Production Docker Compose configuration for 6FB AI Agent System
version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: agent-system-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.prod
    container_name: agent-system-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.yourdomain.com
      - NEXT_PUBLIC_ENABLE_RAG=true
      - NEXT_PUBLIC_ENABLE_MOCK_FALLBACK=false
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
      - NEXT_PUBLIC_PUSHER_APP_KEY=${NEXT_PUBLIC_PUSHER_APP_KEY}
      - NEXT_PUBLIC_PUSHER_APP_CLUSTER=${NEXT_PUBLIC_PUSHER_APP_CLUSTER}
      - NEXT_PUBLIC_NOVU_APPLICATION_IDENTIFIER=${NEXT_PUBLIC_NOVU_APPLICATION_IDENTIFIER}
    env_file:
      - .env.production
    volumes:
      - frontend_cache:/app/.next/cache
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9999/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.prod
    container_name: agent-system-backend-prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CORS_ORIGINS=https://yourdomain.com
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PUSHER_APP_ID=${PUSHER_APP_ID}
      - PUSHER_APP_KEY=${PUSHER_APP_KEY}
      - PUSHER_APP_SECRET=${PUSHER_APP_SECRET}
      - PUSHER_APP_CLUSTER=${PUSHER_APP_CLUSTER}
      - NOVU_API_KEY=${NOVU_API_KEY}
      - POSTHOG_API_KEY=${POSTHOG_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - EDGE_CONFIG=${EDGE_CONFIG}
    env_file:
      - .env.production
    volumes:
      - backend_logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL database
  database:
    image: postgres:15-alpine
    container_name: agent-system-database-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/complete-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./configs/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./configs/postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - postgres_logs:/var/log/postgresql
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: agent-system-redis-prod
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf:ro
      - redis_logs:/var/log/redis
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Monitoring and logging services
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-system-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - agent-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: agent-system-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - agent-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: agent-system-loki-prod
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./configs/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - agent-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  promtail:
    image: grafana/promtail:latest
    container_name: agent-system-promtail-prod
    restart: unless-stopped
    volumes:
      - ./configs/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - nginx_logs:/var/log/nginx:ro
      - backend_logs:/var/log/backend:ro
      - postgres_logs:/var/log/postgresql:ro
      - redis_logs:/var/log/redis:ro
    depends_on:
      - loki
    networks:
      - agent-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

networks:
  agent-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: agent-network-prod

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agent-system/data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agent-system/data/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agent-system/data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agent-system/data/grafana
  
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agent-system/data/loki
  
  frontend_cache:
    driver: local
  
  nginx_logs:
    driver: local
  
  backend_logs:
    driver: local
  
  postgres_logs:
    driver: local
  
  redis_logs:
    driver: local