#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials')
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl)
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '[CONFIGURED]' : '[MISSING]')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testSupabaseAuth() {
  console.log('üîç Testing Supabase Authentication and Email Configuration...\n')
  
  // Test 1: Check auth settings
  console.log('1. Testing auth settings...')
  try {
    // Test basic connection by trying to get auth user (will fail gracefully)
    const { data: authData, error: authError } = await supabase.auth.getUser()
    console.log('‚úÖ Supabase connection established')
  } catch (error) {
    console.log('‚úÖ Supabase connection established (no active session expected)')
  }

  // Test 2: Try to register a test user to see what happens
  console.log('\n2. Testing user registration...')
  const testEmail = 'test-' + Date.now() + '@example.com'
  
  try {
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: 'TestPassword123!',
      options: {
        data: {
          full_name: 'Test User'
        }
      }
    })
    
    if (error) {
      console.log('‚ùå Registration error:', error.message)
      if (error.message.includes('email')) {
        console.log('üîç This might be an email configuration issue')
      }
    } else {
      console.log('‚úÖ Registration attempt successful')
      console.log('Data:', JSON.stringify(data, null, 2))
      
      if (data.user && !data.session) {
        console.log('üìß Email confirmation required - this is expected')
      } else if (data.session) {
        console.log('‚ö†Ô∏è  User was logged in immediately without email confirmation')
      }
    }
  } catch (error) {
    console.log('‚ùå Registration failed:', error.message)
  }

  // Test 3: Try to resend email for the test user
  console.log('\n3. Testing email resend functionality...')
  try {
    const { data, error } = await supabase.auth.resend({
      type: 'signup',
      email: testEmail
    })
    
    if (error) {
      console.log('‚ùå Resend email error:', error.message)
    } else {
      console.log('‚úÖ Resend email request successful')
      console.log('Data:', JSON.stringify(data, null, 2))
    }
  } catch (error) {
    console.log('‚ùå Resend email failed:', error.message)
  }

  console.log('\nüîß Debug Information:')
  console.log('Supabase URL:', supabaseUrl)
  console.log('Service Role Key configured:', !!supabaseServiceKey)
  
  console.log('\nüìã Next Steps:')
  console.log('1. Check your Supabase dashboard ‚Üí Authentication ‚Üí Settings')
  console.log('2. Ensure "Enable email confirmations" is turned on')
  console.log('3. Check if SMTP is configured or using Supabase default')
  console.log('4. Verify email templates are configured')
  console.log('5. Check spam folder for test emails')
}

testSupabaseAuth().catch(console.error)