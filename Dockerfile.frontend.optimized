# Multi-stage Dockerfile for 6FB AI Agent System Frontend
# Optimized for security, performance, and production deployment

# =============================================================================
# Stage 1: Base Dependencies
# =============================================================================
FROM node:18-alpine as base

# Install security updates and required tools
RUN apk update && apk upgrade && \
    apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S appuser -u 1001 -G nodejs

WORKDIR /app

# =============================================================================
# Stage 2: Dependencies Installation
# =============================================================================
FROM base as dependencies

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
ENV HUSKY=0 \
    NODE_ENV=development
RUN npm ci --ignore-scripts --include=dev

# =============================================================================
# Stage 3: Build Stage
# =============================================================================
FROM dependencies as builder

# Copy source code
COPY --chown=appuser:nodejs . .

# Build the application
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1
RUN npm run build

# =============================================================================
# Stage 4: Development Image
# =============================================================================
FROM dependencies as development

# Copy source code with proper ownership
COPY --chown=appuser:nodejs . .

# Create cache directory
RUN mkdir -p /app/.next/cache && \
    chown -R appuser:nodejs /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 9999

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:9999 || exit 1

# Development server
CMD ["dumb-init", "npm", "run", "dev", "--", "-p", "9999"]

# =============================================================================
# Stage 5: Production Image
# =============================================================================
FROM base as production

# Install only production dependencies
COPY package*.json ./
ENV NODE_ENV=production \
    HUSKY=0 \
    NEXT_TELEMETRY_DISABLED=1
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=appuser:nodejs /app/.next/standalone ./
COPY --from=builder --chown=appuser:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=appuser:nodejs /app/public ./public

# Create cache directory with correct permissions
RUN mkdir -p /app/.next/cache && \
    chown -R appuser:nodejs /app && \
    chmod -R 755 /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 9999

# Health check for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=5 \
    CMD curl -f http://localhost:9999 || exit 1

# Production server
CMD ["dumb-init", "node", "server.js"]