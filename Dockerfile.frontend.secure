# Multi-stage secure Dockerfile for Next.js Frontend
# Security hardened with minimal attack surface

# Build stage
FROM node:18-alpine as builder

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_ENVIRONMENT=production

# Security hardening - Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Install build dependencies with security updates
RUN apk update && apk add --no-cache \
    libc6-compat \
    curl \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./

# Install dependencies with security auditing
RUN npm ci --only=production --audit --audit-level=high && \
    npm cache clean --force

# Copy source code
COPY --chown=nextjs:nodejs . .

# Set build environment variables
ENV NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production \
    NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
    NEXT_PUBLIC_ENVIRONMENT=${NEXT_PUBLIC_ENVIRONMENT} \
    NEXT_PUBLIC_VERSION=${VERSION}

# Build application
RUN npm run build && \
    rm -rf .next/cache

# Production stage - Nginx Alpine for static serving
FROM nginx:1.25-alpine as production

# Metadata labels
LABEL maintainer="6FB AI Agent System Security Team" \
      version="${VERSION}" \
      description="Secure Next.js frontend for 6FB AI Agent System" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}" \
      security.scan="enabled" \
      security.hardened="true"

# Security hardening
RUN apk update && apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/* \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 -G nodejs

# Remove default nginx configuration
RUN rm -rf /etc/nginx/conf.d/default.conf \
    && rm -rf /usr/share/nginx/html/*

# Copy nginx configuration
COPY configs/nginx/frontend.conf /etc/nginx/conf.d/default.conf
COPY configs/nginx/security-headers.conf /etc/nginx/conf.d/security-headers.conf

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/static /usr/share/nginx/html/_next/static
COPY --from=builder --chown=nextjs:nodejs /app/public /usr/share/nginx/html

# Create Next.js specific directories and files
COPY --from=builder --chown=nextjs:nodejs /app/.next /app/.next
COPY --from=builder --chown=nextjs:nodejs /app/package.json /app/
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js /app/

# Install Node.js for SSR
RUN apk add --no-cache nodejs npm

# Set working directory for Next.js
WORKDIR /app

# Install production dependencies
RUN npm ci --only=production && npm cache clean --force

# Create log directories
RUN mkdir -p /var/log/nginx /var/cache/nginx && \
    chown -R nextjs:nodejs /var/log/nginx /var/cache/nginx /var/run

# Security hardening - remove unnecessary packages
RUN apk del curl

# Set environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000

# Create startup script
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'set -e' >> /docker-entrypoint.sh && \
    echo 'nginx -g "daemon off;" &' >> /docker-entrypoint.sh && \
    echo 'cd /app && npm start' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Expose port
EXPOSE 3000

# Switch to non-root user
USER nextjs:nodejs

# Start application
ENTRYPOINT ["/docker-entrypoint.sh"]