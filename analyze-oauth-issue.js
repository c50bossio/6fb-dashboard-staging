// Comprehensive OAuth Flow Analysis
// Run this to understand exactly what's happening

const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://dfhqjdoydihajmjxniee.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRmaHFqZG95ZGloYWptanhuaWVlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwODcwMTAsImV4cCI6MjA2OTY2MzAxMH0.TUYnEBzpB2LQaGLIXg5wtvJHyyhFD2QAOMdY_B-V1fI'

console.log('üîç COMPREHENSIVE OAUTH ANALYSIS')
console.log('================================\n')

async function analyzeOAuthIssue() {
  const supabase = createClient(supabaseUrl, supabaseAnonKey)
  
  console.log('1Ô∏è‚É£ CHECKING SUPABASE CONNECTION')
  console.log('---------------------------------')
  
  try {
    // Test basic connection
    const { data, error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1)
    
    if (error) {
      console.log('‚ùå Database connection failed:', error.message)
    } else {
      console.log('‚úÖ Database connection successful')
    }
  } catch (err) {
    console.log('‚ùå Connection error:', err.message)
  }
  
  console.log('\n2Ô∏è‚É£ ANALYZING OAUTH CALLBACK FLOW')
  console.log('----------------------------------')
  console.log('When OAuth callback gets stuck, it means:')
  console.log('')
  console.log('WORKING PARTS:')
  console.log('‚úÖ OAuth initiation - Redirects to Google')
  console.log('‚úÖ Google authentication - User signs in')
  console.log('‚úÖ Callback URL - Returns to /auth/callback with code')
  console.log('‚úÖ PKCE verifier - Stored in localStorage')
  console.log('')
  console.log('FAILING PART:')
  console.log('‚ùå Code exchange - The code-for-session exchange fails')
  console.log('   OR')
  console.log('‚ùå Redirect logic - The post-auth redirect isn\'t happening')
  
  console.log('\n3Ô∏è‚É£ COMMON CAUSES OF STUCK CALLBACK')
  console.log('------------------------------------')
  console.log('1. JavaScript Error in callback page')
  console.log('   ‚Üí Check browser console for red errors')
  console.log('')
  console.log('2. Router navigation failing')
  console.log('   ‚Üí Next.js router.push() not working')
  console.log('   ‚Üí Could be due to middleware interference')
  console.log('')
  console.log('3. Infinite loop in useEffect')
  console.log('   ‚Üí Check if hasStarted guard is working')
  console.log('')
  console.log('4. Profile creation/fetch failing')
  console.log('   ‚Üí Database operation blocking redirect')
  
  console.log('\n4Ô∏è‚É£ DEBUG STEPS TO RUN IN BROWSER')
  console.log('----------------------------------')
  console.log('1. Open Chrome DevTools (F12)')
  console.log('2. Go to Network tab')
  console.log('3. Clear browser storage:')
  console.log('   localStorage.clear(); sessionStorage.clear();')
  console.log('4. Navigate to: http://localhost:9999/register')
  console.log('5. Click "Sign up with Google"')
  console.log('6. Complete authentication')
  console.log('7. When stuck on callback, check:')
  console.log('   - Console tab for errors')
  console.log('   - Network tab for failed requests')
  console.log('   - Application tab > Local Storage for session data')
  
  console.log('\n5Ô∏è‚É£ CHECKING CURRENT SESSION')
  console.log('-----------------------------')
  
  try {
    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      console.log('‚ùå Session check error:', error.message)
    } else if (session) {
      console.log('‚úÖ Active session found!')
      console.log('   User:', session.user.email)
      console.log('   Provider:', session.user.app_metadata?.provider)
    } else {
      console.log('‚ÑπÔ∏è No active session')
    }
  } catch (err) {
    console.log('‚ùå Session check failed:', err.message)
  }
  
  console.log('\n6Ô∏è‚É£ TESTING PROFILE OPERATIONS')
  console.log('-------------------------------')
  
  // Test if we can query profiles
  try {
    const { data: profiles, error } = await supabase
      .from('profiles')
      .select('id, email, subscription_status, onboarding_completed')
      .limit(1)
    
    if (error) {
      console.log('‚ùå Profile query failed:', error.message)
    } else {
      console.log('‚úÖ Profile query works')
      if (profiles && profiles.length > 0) {
        console.log('   Sample profile:', {
          hasSubscription: profiles[0].subscription_status === 'active',
          needsOnboarding: !profiles[0].onboarding_completed
        })
      }
    }
  } catch (err) {
    console.log('‚ùå Profile operation error:', err.message)
  }
  
  console.log('\n7Ô∏è‚É£ MANUAL TESTING INSTRUCTIONS')
  console.log('--------------------------------')
  console.log('1. Open a REGULAR browser (not Puppeteer)')
  console.log('2. Open Developer Console (F12)')
  console.log('3. Run this in console:')
  console.log('   localStorage.clear(); sessionStorage.clear();')
  console.log('4. Go to: http://localhost:9999/register')
  console.log('5. Watch console AS you click "Sign up with Google"')
  console.log('6. Look for these specific logs:')
  console.log('   - "üîë PKCE verifier check:"')
  console.log('   - "‚úÖ Session auto-detected!" or "üîê No auto-detection"')
  console.log('   - "üéØ Determining redirect based on profile:"')
  console.log('   - Any red error messages')
  console.log('')
  console.log('7. If stuck, run this in console:')
  console.log('   window.location.pathname // Should be /auth/callback')
  console.log('   window.location.search   // Should have ?code=...')
}

analyzeOAuthIssue().catch(console.error)