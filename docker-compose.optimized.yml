services:
  # Optimized configuration for performance and concurrent users
  
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NODE_ENV=production
    container_name: agent-system-frontend-optimized
    ports:
      - "9999:9999"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_ENABLE_RAG=true
      - NEXT_PUBLIC_ENABLE_MOCK_FALLBACK=true
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_OPTIONS=--max-old-space-size=1024
    env_file:
      - .env.local
    volumes:
      # Read-only mounts for production
      - ./app:/app/app:ro
      - ./components:/app/components:ro
      - ./lib:/app/lib:ro
      - ./public:/app/public:ro
      - ./package.json:/app/package.json:ro
      - ./next.config.js:/app/next.config.js:ro
      - ./tailwind.config.js:/app/tailwind.config.js:ro
      - frontend_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9999/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # Performance optimizations
    stop_signal: SIGTERM
    stop_grace_period: 30s
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - PYTHON_ENV=production
    container_name: agent-system-backend-optimized
    ports:
      - "8001:8000"
    environment:
      # Database optimizations
      - DATABASE_URL=sqlite:///./data/agent_system.db
      - DATABASE_POOL_SIZE=20
      - DATABASE_MAX_OVERFLOW=30
      
      # Performance settings
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=random
      - CORS_ORIGINS=http://localhost:9999
      - PYTHONPATH=/app
      
      # AI service optimizations
      - AI_CONNECTION_POOL_SIZE=10
      - AI_CACHE_SIZE=1000
      - AI_REQUEST_TIMEOUT=30
      
      # Rate limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_STORAGE=memory
      
      # Memory management
      - MEMORY_LIMIT=2048M
      - GC_AGGRESSIVE_CLEANUP=true
      
    env_file:
      - .env.local
    volumes:
      # Application code (read-only in production)
      - ./database:/app/database:ro
      - ./services:/app/services:ro
      - ./middleware:/app/middleware:ro
      - ./optimized_fastapi_backend.py:/app/fastapi_backend.py:ro
      
      # Writable data volumes
      - agent_data:/app/data
      - agent_logs:/app/logs
      
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || python -c 'import requests; requests.get(\"http://localhost:8000/health\")' || exit 1"]
      interval: 20s
      timeout: 15s
      retries: 3
      start_period: 45s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # Performance optimizations
    stop_signal: SIGTERM
    stop_grace_period: 30s
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"
    # Security hardening
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    security_opt:
      - no-new-privileges:true

  # Performance monitoring container (optional)
  monitor:
    image: prom/node-exporter:latest
    container_name: agent-system-monitor
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - agent-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  agent-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: agent-bridge
      com.docker.network.driver.mtu: 1500
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  frontend_node_modules:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=500m,uid=1000,gid=1000
  
  agent_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  agent_logs:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ./logs

# Configuration for different environments
x-common-variables: &common-variables
  NODE_ENV: production
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

# Override for development (use with docker-compose -f docker-compose.yml -f docker-compose.dev.yml)
x-dev-overrides: &dev-overrides
  <<: *common-variables
  NODE_ENV: development
  DEBUG: true