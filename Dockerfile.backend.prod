# Multi-stage production backend Dockerfile for 6FB AI Agent System
# Stage 1: Build stage
FROM python:3.11-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Production runtime
FROM python:3.11-slim AS runner

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    libpq5 \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/appuser/.local

# Make sure Python packages are in PATH
ENV PATH=/home/appuser/.local/bin:$PATH
ENV PYTHONPATH=/app
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Copy application code with proper ownership
COPY --chown=appuser:appuser fastapi_backend.py ./
COPY --chown=appuser:appuser main.py ./
COPY --chown=appuser:appuser database/ ./database/
COPY --chown=appuser:appuser services/ ./services/
COPY --chown=appuser:appuser security/ ./security/
COPY --chown=appuser:appuser middleware/ ./middleware/

# Create necessary directories with proper ownership
RUN mkdir -p /app/data /app/logs && chown -R appuser:appuser /app/data /app/logs

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application with Gunicorn for production
CMD ["gunicorn", "fastapi_backend:app", "--bind", "0.0.0.0:8000", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--max-requests", "1000", "--max-requests-jitter", "100", "--timeout", "30", "--keepalive", "5"]