# Multi-stage secure Dockerfile for FastAPI Backend
# Security hardened with minimal attack surface

# Build stage - Use Python slim image for smaller attack surface
FROM python:3.11-slim as builder

# Build arguments for metadata
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Set environment variables for build
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies (removed in final stage)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libc6-dev \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for build
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements-production.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-production.txt

# Production stage - Distroless for minimal attack surface
FROM gcr.io/distroless/python3-debian11:latest as production

# Metadata labels
LABEL maintainer="6FB AI Agent System Security Team" \
      version="${VERSION}" \
      description="Secure FastAPI backend for 6FB AI Agent System" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}" \
      security.scan="enabled" \
      security.hardened="true"

# Copy Python installation from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Create non-root user (distroless uses numeric IDs)
USER 1000:1000

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=1000:1000 secure_fastapi_backend.py ./
COPY --chown=1000:1000 services/ ./services/
COPY --chown=1000:1000 middleware/ ./middleware/
COPY --chown=1000:1000 monitoring/ ./monitoring/
COPY --chown=1000:1000 database/ ./database/

# Create necessary directories
RUN mkdir -p /app/logs /app/backups /tmp/prometheus && \
    chmod 755 /app/logs /app/backups /tmp/prometheus

# Security hardening
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/app" \
    PORT=8000 \
    WORKERS=4 \
    ENVIRONMENT=production \
    DEBUG=false \
    LOG_LEVEL=INFO

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"

# Expose port
EXPOSE 8000

# Run as non-root user
ENTRYPOINT ["python", "-m", "uvicorn", "secure_fastapi_backend:app"]
CMD ["--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--log-level", "info", "--no-server-header", "--no-date-header"]