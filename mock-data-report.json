{
  "timestamp": "2025-08-11T17:40:40.433Z",
  "summary": {
    "totalViolations": 250,
    "filesScanned": 799,
    "filesWithViolations": 108
  },
  "violations": [
    {
      "file": "test_trafft_integration.js",
      "line": 231,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAppointments = ["
    },
    {
      "file": "test_trafft_integration.js",
      "line": 237,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockCustomers = ["
    },
    {
      "file": "test_trafft_integration.js",
      "line": 242,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockServices = ["
    },
    {
      "file": "test_trafft_integration.js",
      "line": 248,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockEmployees = ["
    },
    {
      "file": "test_supabase_registration.js",
      "line": 39,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "full_name: 'Test User',"
    },
    {
      "file": "test_orchestration_with_auth.js",
      "line": 76,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "async createTestUser() {"
    },
    {
      "file": "test_orchestration_with_auth.js",
      "line": 77,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('üîê Creating test user for authentication...')"
    },
    {
      "file": "test_orchestration_with_auth.js",
      "line": 86,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Try to register a new test user"
    },
    {
      "file": "test_orchestration_with_auth.js",
      "line": 97,
      "pattern": "Test\\s+User",
      "match": "Test user",
      "context": "console.log('‚úÖ Test user created and authenticated')"
    },
    {
      "file": "test_orchestration_with_auth.js",
      "line": 103,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Try with a known test user"
    },
    {
      "file": "test_orchestration_with_auth.js",
      "line": 118,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('‚úÖ Authenticated with existing test user')"
    },
    {
      "file": "test_orchestration_with_auth.js",
      "line": 339,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "const authenticated = await this.createTestUser()"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 105,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockGoogleEvent = {"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 107,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "summary: 'Haircut with John Doe',"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 111,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "attendees: [{ email: 'john.doe@email.com', displayName: 'John Doe' }],"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 124,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "this.assert(normalized.client.name === 'John Doe', 'Client name extraction')"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 148,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAcuityAppointment = {"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 203,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockSquareBooking = {"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 248,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "await this.createTestIntegrations()"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 267,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "async createTestIntegrations() {"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 332,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createMock",
      "context": "await this.createMockAppointments()"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 356,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createMock",
      "context": "async createMockAppointments() {"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 357,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAppointments = ["
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 363,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "name: 'John Doe',"
    },
    {
      "file": "test_multi_platform_integration.js",
      "line": 405,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "name: 'John Doe',"
    },
    {
      "file": "test_comprehensive_trafft_integration.js",
      "line": 33,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const MOCK",
      "context": "const MOCK_DATA = {"
    },
    {
      "file": "test_comprehensive_trafft_integration.js",
      "line": 36,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "customerName: 'John Doe',"
    },
    {
      "file": "test_comprehensive_trafft_integration.js",
      "line": 438,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "return normalized.price === 75.00 && normalized.clientName === 'John Doe'"
    },
    {
      "file": "test_calendar_functionality.js",
      "line": 41,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockDataChecks = ["
    },
    {
      "file": "test-performance-improvement.js",
      "line": 100,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "let mock",
      "context": "let mockDataFound = false"
    },
    {
      "file": "test-notification-integration.js",
      "line": 190,
      "pattern": "Jane\\s+Doe",
      "match": "Jane Doe",
      "context": "customerName: 'Jane Doe',"
    },
    {
      "file": "test-notification-integration.js",
      "line": 372,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = createNotificationData.appointmentConfirmation("
    },
    {
      "file": "test-internal-notifications.js",
      "line": 11,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = {"
    },
    {
      "file": "seed-real-data.js",
      "line": 117,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * service",
      "context": "service_name: services[Math.floor(Math.random() * services.length)],"
    },
    {
      "file": "seed-database.js",
      "line": 67,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * service",
      "context": "service_name: services[Math.floor(Math.random() * services.length)],"
    },
    {
      "file": "populate-test-appointments.js",
      "line": 21,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "{ name: 'John Doe', email: 'john@test.com', phone: '555-0101' },"
    },
    {
      "file": "populate-test-appointments.js",
      "line": 74,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * testCustomer",
      "context": "const customer = testCustomers[Math.floor(Math.random() * testCustomers.length)]"
    },
    {
      "file": "populate-test-appointments.js",
      "line": 76,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * service",
      "context": "const serviceIndex = Math.floor(Math.random() * serviceIds.length)"
    },
    {
      "file": "check-replication-status.js",
      "line": 58,
      "pattern": "test@test\\.com",
      "match": "test@test.com",
      "context": "customer_email: 'test@test.com',"
    },
    {
      "file": "tests/auth.setup.js",
      "line": 20,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockSession = {"
    },
    {
      "file": "tests/auth.setup.js",
      "line": 26,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "full_name: 'Playwright Test User'"
    },
    {
      "file": "tests/test-utils/nuclear-input-helpers.js",
      "line": 159,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createMock",
      "context": "static createMockConsole() {"
    },
    {
      "file": "tests/test-utils/nuclear-input-helpers.js",
      "line": 320,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mocks = {"
    },
    {
      "file": "tests/test-utils/nuclear-input-helpers.js",
      "line": 534,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "export const testData = TestDataGenerator"
    },
    {
      "file": "tests/test-utils/nuclear-input-helpers.js",
      "line": 535,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockAPI = MockAPIFactory"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 31,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockUser = {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 34,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "name: 'Test User',"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 39,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockBarbershop = {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 52,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockAppointment = {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 64,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockService = {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 73,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockAgent = {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 80,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockAgentResponse = {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 106,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockApiResponse = (data, status = 200) => ({"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 114,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockFetch = (responses = {}) => {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 129,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockAuthSession = (user = mockUser) => {"
    },
    {
      "file": "test-utils/test-utils.js",
      "line": 137,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "export const mockTrafftData = {"
    },
    {
      "file": "test-utils/global-teardown.js",
      "line": 14,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateTest",
      "context": "await generateTestSummary()"
    },
    {
      "file": "test-utils/global-teardown.js",
      "line": 34,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateTest",
      "context": "async function generateTestSummary() {"
    },
    {
      "file": "test-utils/global-setup.js",
      "line": 184,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = {"
    },
    {
      "file": "test-utils/global-setup.js",
      "line": 189,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "name: 'Test User',"
    },
    {
      "file": "test-utils/global-setup.js",
      "line": 228,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testDataPath = path.join(__dirname, '../test-results/test-data.json')"
    },
    {
      "file": "test-utils/custom-reporter.js",
      "line": 326,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateTest",
      "context": "${this.generateTestItems()}"
    },
    {
      "file": "test-utils/custom-reporter.js",
      "line": 372,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateTest",
      "context": "generateTestItems() {"
    },
    {
      "file": "services/integrations/data-normalization-service.js",
      "line": 196,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "name: appointment.serviceName || 'Service',"
    },
    {
      "file": "services/integrations/data-normalization-service.js",
      "line": 258,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "name: appointment.serviceName || 'Service',"
    },
    {
      "file": "services/integrations/data-normalization-service.js",
      "line": 333,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "if (!title) return 'Service'"
    },
    {
      "file": "services/integrations/data-normalization-service.js",
      "line": 335,
      "pattern": "[\"']Service[\"']",
      "match": "\"Service\"",
      "context": "// Common patterns: \"Service - Customer\", \"Customer - Service\", \"Service\""
    },
    {
      "file": "scripts/test-supabase-real-email.js",
      "line": 25,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "full_name: 'Test User',"
    },
    {
      "file": "scripts/test-supabase-auth.js",
      "line": 31,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Test 2: Try to register a test user to see what happens"
    },
    {
      "file": "scripts/test-supabase-auth.js",
      "line": 41,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "full_name: 'Test User'"
    },
    {
      "file": "scripts/test-supabase-auth.js",
      "line": 65,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Test 3: Try to resend email for the test user"
    },
    {
      "file": "scripts/test-registration.js",
      "line": 34,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "full_name: 'Test User',"
    },
    {
      "file": "scripts/test-recurring-with-real-data.js",
      "line": 234,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = await getTestData();"
    },
    {
      "file": "scripts/test-recurring-display-bug.js",
      "line": 39,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "async function createTestRecurringAppointment() {"
    },
    {
      "file": "scripts/test-recurring-display-bug.js",
      "line": 218,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "const appointment = await createTestRecurringAppointment();"
    },
    {
      "file": "scripts/test-new-recurring-system.js",
      "line": 412,
      "pattern": "(?:const|let|var)\\s+sample",
      "match": "const sample",
      "context": "const sample = data[0];"
    },
    {
      "file": "scripts/test-full-registration.js",
      "line": 19,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = {"
    },
    {
      "file": "scripts/test-full-registration.js",
      "line": 133,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Sign out the test user"
    },
    {
      "file": "scripts/test-complete-registration-flow.js",
      "line": 22,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = {"
    },
    {
      "file": "scripts/seed-test-data.js",
      "line": 41,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = {"
    },
    {
      "file": "scripts/seed-test-data.js",
      "line": 169,
      "pattern": "Test\\s+User",
      "match": "Test user",
      "context": "// Test users (will be created with auth.users)"
    },
    {
      "file": "scripts/seed-test-data.js",
      "line": 213,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Step 1: Create test users"
    },
    {
      "file": "scripts/seed-test-data.js",
      "line": 214,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('üë§ Creating test users...')"
    },
    {
      "file": "scripts/seed-test-data.js",
      "line": 396,
      "pattern": "(?:const|let|var)\\s+sample",
      "match": "const sample",
      "context": "const sampleCustomers = ["
    },
    {
      "file": "scripts/run-recurring-migration.js",
      "line": 138,
      "pattern": "(?:const|let|var)\\s+sample",
      "match": "const sample",
      "context": "const sample = bookings[0];"
    },
    {
      "file": "scripts/generate-sample-data.js",
      "line": 40,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateSampleData",
      "context": "async function generateSampleData() {"
    },
    {
      "file": "scripts/generate-sample-data.js",
      "line": 114,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateSampleData",
      "context": "generateSampleData()"
    },
    {
      "file": "scripts/generate-sample-data.js",
      "line": 117,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateSampleData",
      "context": "export default generateSampleData"
    },
    {
      "file": "scripts/generate-comprehensive-data.js",
      "line": 48,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateTestData",
      "context": "async function generateTestData() {"
    },
    {
      "file": "scripts/generate-comprehensive-data.js",
      "line": 424,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateTestData",
      "context": "generateTestData()"
    },
    {
      "file": "scripts/fix-service-data.js",
      "line": 107,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "const availableServices = servicesList.filter(s => s.name !== 'Service')"
    },
    {
      "file": "scripts/fix-service-data.js",
      "line": 122,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * availableService",
      "context": "const randomService = availableServices[Math.floor(Math.random() * availableServices.length)]"
    },
    {
      "file": "scripts/fix-service-data.js",
      "line": 147,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * availableService",
      "context": "const randomService = availableServices[Math.floor(Math.random() * availableServices.length)]"
    },
    {
      "file": "scripts/fix-service-data.js",
      "line": 218,
      "pattern": "[\"']Service[\"']",
      "match": "\"Service\"",
      "context": "console.log('   - The \"Service\" option should no longer appear in filters')"
    },
    {
      "file": "scripts/find-mock-data.js",
      "line": 8,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "'generateMock',"
    },
    {
      "file": "scripts/find-mock-data.js",
      "line": 96,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockInstances = []"
    },
    {
      "file": "scripts/find-mock-data.js",
      "line": 235,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "'Replace generateMock* functions with database query functions',"
    },
    {
      "file": "scripts/debug-email-verification.js",
      "line": 32,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "full_name: 'Debug Test User',"
    },
    {
      "file": "scripts/debug-email-verification.js",
      "line": 151,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Cleanup: Try to delete the test user (optional)"
    },
    {
      "file": "scripts/debug-email-verification.js",
      "line": 154,
      "pattern": "Test\\s+User",
      "match": "Test user",
      "context": "console.log('Test user created with ID:', data.user?.id)"
    },
    {
      "file": "scripts/create-test-user.js",
      "line": 18,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "async function createTestUser() {"
    },
    {
      "file": "scripts/create-test-user.js",
      "line": 19,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('üöÄ Creating test user account...\\n');"
    },
    {
      "file": "scripts/create-test-user.js",
      "line": 24,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "full_name: 'Test User',"
    },
    {
      "file": "scripts/create-test-user.js",
      "line": 57,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "console.log('\\nüìù Test User Credentials:');"
    },
    {
      "file": "scripts/create-test-user.js",
      "line": 69,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.error('‚ùå Error creating test user:', error.message);"
    },
    {
      "file": "scripts/create-test-user.js",
      "line": 75,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "createTestUser();"
    },
    {
      "file": "scripts/create-test-data.js",
      "line": 90,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTestData",
      "context": "async function createTestData() {"
    },
    {
      "file": "scripts/create-test-data.js",
      "line": 183,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * 4) + 6 // 6-9 service",
      "context": "const numServices = Math.floor(Math.random() * 4) + 6 // 6-9 services per shop"
    },
    {
      "file": "scripts/create-test-data.js",
      "line": 374,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTestData",
      "context": "createTestData().catch(console.error)"
    },
    {
      "file": "scripts/create-test-data.js",
      "line": 377,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTestData",
      "context": "export default createTestData"
    },
    {
      "file": "scripts/create-tables-simple.js",
      "line": 43,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = {"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 19,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "console.log('üßπ Cleaning Up Test Users\\n');"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 33,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('üîç Finding test users...');"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 43,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Filter test users (emails containing 'test' or from our test domains)"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 56,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log(`\\nüìã Found ${testUsers.length} test users:`);"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 60,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('‚úÖ No test users found to clean up');"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 86,
      "pattern": "Test\\s+User",
      "match": "Test User",
      "context": "console.log('üí° Delete All Test Users (use carefully):');"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 96,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('‚Ä¢ Consider keeping one test user for ongoing testing');"
    },
    {
      "file": "scripts/cleanup-test-users.js",
      "line": 101,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "console.log('1. Keep one verified test user for ongoing testing');"
    },
    {
      "file": "scripts/check-email-settings.js",
      "line": 37,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Try to sign up a test user to check if emails are being sent"
    },
    {
      "file": "scripts/check-email-settings.js",
      "line": 53,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Clean up test user if created"
    },
    {
      "file": "scripts/check-email-settings.js",
      "line": 80,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// Test with a known user (the test user we created)"
    },
    {
      "file": "scripts/check-email-settings.js",
      "line": 85,
      "pattern": "Test\\s+User",
      "match": "Test user",
      "context": "console.log(`   üë§ Test user verified: ${testUser.user.email_confirmed_at ? 'Yes' : 'No'}`);"
    },
    {
      "file": "lib/seo-utils.js",
      "line": 147,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "'@type': 'Service',"
    },
    {
      "file": "lib/calendar-data.js",
      "line": 83,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "export function generateMockEvents(date = new Date(), resources = DEFAULT_RESOURCES, services = DEFA"
    },
    {
      "file": "lib/calendar-data.js",
      "line": 85,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "const customers = ['John Doe', 'Jane Smith', 'Bob Wilson', 'Alice Brown', 'Charlie Davis', 'Emma Joh"
    },
    {
      "file": "lib/calendar-data.js",
      "line": 101,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * service",
      "context": "const service = services[Math.floor(Math.random() * services.length)]"
    },
    {
      "file": "lib/calendar-data.js",
      "line": 102,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * customer",
      "context": "const customer = customers[Math.floor(Math.random() * customers.length)]"
    },
    {
      "file": "lib/calendar-data.js",
      "line": 193,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${appointment.client_name || 'Client'} - ${appointment.service?.name || 'Service'}`,"
    },
    {
      "file": "lib/calendar-data.js",
      "line": 216,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "const headers = ['Date', 'Start Time', 'End Time', 'Customer', 'Service', 'Barber', 'Duration (min)'"
    },
    {
      "file": "lib/notifications/notification-service.js",
      "line": 158,
      "pattern": "(?:const|let|var)\\s+testData",
      "match": "const testData",
      "context": "const testData = {"
    },
    {
      "file": "hooks/useTenantAnalytics.js",
      "line": 39,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const mockAnalytics = generateMockTenantAnalytics(tenant, dateRange, filters)"
    },
    {
      "file": "hooks/useTenantAnalytics.js",
      "line": 39,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAnalytics = generateMockTenantAnalytics(tenant, dateRange, filters)"
    },
    {
      "file": "hooks/useTenantAnalytics.js",
      "line": 83,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const mockPlatformData = generateMockPlatformAnalytics(dateRange)"
    },
    {
      "file": "hooks/useTenantAnalytics.js",
      "line": 83,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockPlatformData = generateMockPlatformAnalytics(dateRange)"
    },
    {
      "file": "hooks/useTenantAnalytics.js",
      "line": 108,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "function generateMockTenantAnalytics(tenant, dateRange, filters) {"
    },
    {
      "file": "hooks/useTenantAnalytics.js",
      "line": 178,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "function generateMockPlatformAnalytics(dateRange) {"
    },
    {
      "file": "hooks/useRealtimeAppointmentsWorking.js",
      "line": 119,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "? `‚ùå ${appointment.extendedProps?.customer || 'Customer'} - ${appointment.extendedProps?.service || "
    },
    {
      "file": "hooks/useRealtimeAppointmentsV2.js",
      "line": 82,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customer_name || 'Customer'} - ${booking.service_name ||"
    },
    {
      "file": "hooks/useRealtimeAppointmentsSimple.js",
      "line": 26,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customer_name || 'Customer'} - ${booking.service_name ||"
    },
    {
      "file": "hooks/useRealtimeAppointmentsFixed.js",
      "line": 80,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customers?.name || booking.customer_name || 'Customer'} "
    },
    {
      "file": "hooks/useRealtimeAppointmentsFixed.js",
      "line": 154,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${isCancelled ? '‚ùå ' : ''}${newBooking.customers?.name || newBooking.customer_name || 'Custo"
    },
    {
      "file": "hooks/useRealtimeAppointmentsFixed.js",
      "line": 204,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${isCancelled ? '‚ùå ' : ''}${updatedBooking.customers?.name || 'Customer'} - ${updatedBooking"
    },
    {
      "file": "hooks/useRealtimeAppointments.js",
      "line": 122,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customers?.name || booking.customer_name || 'Customer'} "
    },
    {
      "file": "hooks/useRealtimeAppointments.js",
      "line": 253,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${payload.new.customer_name || 'Customer'} - ${payload.new.service_name || 'Service'}`,"
    },
    {
      "file": "hooks/useRealtimeAppointments.js",
      "line": 283,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${isCancelled ? '‚ùå ' : ''}${newBooking.customers?.name || newBooking.customer_name || 'Custo"
    },
    {
      "file": "hooks/useRealtimeAppointments.js",
      "line": 384,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "? `‚ùå ${appointment.extendedProps?.customer || 'Customer'} - ${appointment.extendedProps?.service || "
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 4,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createMock",
      "context": "const createMockPusher = (key, options) => {"
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 49,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const mockData = generateMockMetrics()"
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 49,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockData = generateMockMetrics()"
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 68,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const mockNotification = generateMockNotification()"
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 68,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockNotification = generateMockNotification()"
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 83,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const generateMockMetrics = () => {"
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 100,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const generateMockNotification = () => {"
    },
    {
      "file": "hooks/useRealtime.js",
      "line": 175,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createMock",
      "context": "const pusher = createMockPusher(data.pusherConfig.key, {"
    },
    {
      "file": "examples/notification-usage-examples.js",
      "line": 193,
      "pattern": "Jane\\s+Doe",
      "match": "Jane Doe",
      "context": "name: 'Jane Doe',"
    },
    {
      "file": "database/seed-test-data.js",
      "line": 184,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * customer",
      "context": "const customerId = customerIds[Math.floor(Math.random() * customerIds.length)]"
    },
    {
      "file": "database/seed-test-data.js",
      "line": 185,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * service",
      "context": "const service = services[Math.floor(Math.random() * services.length)]"
    },
    {
      "file": "database/seed-test-data.js",
      "line": 261,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * customer",
      "context": "customer_id: customerIds[Math.floor(Math.random() * customerIds.length)],"
    },
    {
      "file": "contexts/TenantContext.js",
      "line": 60,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockTenant = {"
    },
    {
      "file": "components/LoadingSpinner.js",
      "line": 69,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({ length:",
      "context": "{Array.from({ length: rows }).map((_, i) => ("
    },
    {
      "file": "components/DashboardHeader.js",
      "line": 97,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "{ id: 1, message: 'New booking from John Doe', time: '5 min ago', read: false },"
    },
    {
      "file": "components/navigation/MobileHeader.js",
      "line": 22,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockNotifications = ["
    },
    {
      "file": "components/monitoring/SystemMonitoringDashboard.js",
      "line": 75,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockMetrics = {"
    },
    {
      "file": "components/dashboard/ActionCenter.js",
      "line": 358,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "{appointment.service_name || 'Service'} with {appointment.barber_name || 'Barber'}"
    },
    {
      "file": "components/calendar/FinalProfessionalCalendar.js",
      "line": 32,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "title: 'John Doe - Haircut',"
    },
    {
      "file": "components/booking/BookingWizard.js",
      "line": 69,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockSettings = {"
    },
    {
      "file": "components/booking/BookingWizard.js",
      "line": 98,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "{ number: 3, title: 'Service', component: ServiceStep },"
    },
    {
      "file": "components/booking/BookingWizard.js",
      "line": 98,
      "pattern": "title:\\s*[\"'].*Service[\"']",
      "match": "title: 'Service'",
      "context": "{ number: 3, title: 'Service', component: ServiceStep },"
    },
    {
      "file": "components/booking/steps/TimeStep.js",
      "line": 80,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBooked = Math.random() > 0.7 // 30% chance of being booked"
    },
    {
      "file": "components/booking/steps/PaymentStep.js",
      "line": 94,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockCards = ["
    },
    {
      "file": "components/booking/steps/PaymentStep.js",
      "line": 322,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "placeholder=\"John Doe\""
    },
    {
      "file": "components/booking/steps/LocationStep.js",
      "line": 20,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockLocations = ["
    },
    {
      "file": "components/booking/steps/BarberStep.js",
      "line": 20,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBarbers = ["
    },
    {
      "file": "components/barber/CreateBookingLinkModal.js",
      "line": 38,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockServices = ["
    },
    {
      "file": "archive/recurring-system-v1/test-files/test-recurring-delete.js",
      "line": 11,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "async function createTestRecurringAppointment() {"
    },
    {
      "file": "archive/recurring-system-v1/test-files/test-recurring-delete.js",
      "line": 68,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "createTestRecurringAppointment();"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 57,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const mockAppointments = generateMockAppointments()"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 57,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAppointments = generateMockAppointments()"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 131,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "const serviceName = service.name || booking.service_name || 'Service'"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 181,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${appointment.clients?.name || appointment.client_name || 'Customer'} - ${appointment.servic"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 374,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "function generateMockAppointments() {"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 378,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "const customers = ['John Doe', 'Jane Smith', 'Bob Wilson', 'Alice Brown']"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 404,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * customer",
      "context": "const customerName = customers[Math.floor(Math.random() * customers.length)]"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 405,
      "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
      "match": "Math.random() * service",
      "context": "const serviceIndex = Math.floor(Math.random() * services.length)"
    },
    {
      "file": "archive/recurring-system-v1/old-routes/route-old.js",
      "line": 496,
      "pattern": "[\"']Service[\"']",
      "match": "'Service'",
      "context": "title: `${booking.customers?.name || 'Customer'} - ${booking.services?.name || 'Service'}`,"
    },
    {
      "file": "app/page.js",
      "line": 41,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBarbershops = ["
    },
    {
      "file": "app/page.js",
      "line": 309,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({ length:",
      "context": "{Array.from({ length: 5 }).map((_, i) => ("
    },
    {
      "file": "app/test-shadcn/page.js",
      "line": 23,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "{ id: '1', title: 'John Doe', color: '#3b82f6' },"
    },
    {
      "file": "app/payments/page.js",
      "line": 19,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockPayments = ["
    },
    {
      "file": "app/payments/page.js",
      "line": 64,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockStats = {"
    },
    {
      "file": "app/dashboard/staff/page.js",
      "line": 25,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockStaff = ["
    },
    {
      "file": "app/dashboard/services/page.js",
      "line": 32,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockServices = ["
    },
    {
      "file": "app/dashboard/inventory/page.js",
      "line": 34,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockInventory = ["
    },
    {
      "file": "app/customers/page.js",
      "line": 21,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockCustomers = ["
    },
    {
      "file": "app/bookings/[id]/page.js",
      "line": 37,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBooking = {"
    },
    {
      "file": "app/bookings/[id]/page.js",
      "line": 71,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "name: 'John Doe',"
    },
    {
      "file": "app/bookings/[id]/success/page.js",
      "line": 29,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBooking = {"
    },
    {
      "file": "app/bookings/[id]/success/page.js",
      "line": 48,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "name: 'John Doe',"
    },
    {
      "file": "app/book/page.js",
      "line": 332,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({ length:",
      "context": "const dates = Array.from({ length: 7 }, (_, i) => {"
    },
    {
      "file": "app/book/[barberId]/page.js",
      "line": 113,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBarber = {"
    },
    {
      "file": "app/book/[barberId]/page.js",
      "line": 138,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockServices = ["
    },
    {
      "file": "app/book/[barberId]/layout.js",
      "line": 6,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBarber = {"
    },
    {
      "file": "app/api/waitlist/matches/route.js",
      "line": 95,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "customer_name: 'John Doe',"
    },
    {
      "file": "app/api/services/route.js",
      "line": 62,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockServices = ["
    },
    {
      "file": "app/api/realtime/metrics/route.js",
      "line": 117,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({ length:",
      "context": "hourlyRevenue: Array.from({ length: 7 }, (_, i) => {"
    },
    {
      "file": "app/api/forecasting/trends/route.js",
      "line": 662,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({length:",
      "context": "Array.from({length: windowSize}, (_, i) => i),"
    },
    {
      "file": "app/api/forecasting/trends/route.js",
      "line": 684,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({length:",
      "context": "Array.from({length: windowSize}, (_, i) => i),"
    },
    {
      "file": "app/api/forecasting/trends/route.js",
      "line": 688,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({length:",
      "context": "Array.from({length: windowSize}, (_, i) => i),"
    },
    {
      "file": "app/api/cancellations/process/route.js",
      "line": 117,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBooking = {"
    },
    {
      "file": "app/api/calendar/sync/route.js",
      "line": 81,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockSyncHistory = ["
    },
    {
      "file": "app/api/calendar/settings/route.js",
      "line": 19,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockSettings = {"
    },
    {
      "file": "app/api/calendar/outlook/auth/route.js",
      "line": 18,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAuthUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=demo&r"
    },
    {
      "file": "app/api/calendar/google/auth/route.js",
      "line": 18,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAuthUrl = `https://accounts.google.com/oauth2/auth?client_id=demo&redirect_uri=${encodeURI"
    },
    {
      "file": "app/api/calendar/accounts/route.js",
      "line": 18,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAccounts = ["
    },
    {
      "file": "app/api/billing/route.js",
      "line": 87,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockSubscription = {"
    },
    {
      "file": "app/api/billing/route.js",
      "line": 116,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockUsage = {"
    },
    {
      "file": "app/api/billing/route.js",
      "line": 280,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockCustomerId = 'cus_demo_customer'"
    },
    {
      "file": "app/api/barbers/route.js",
      "line": 23,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockBarbers = ["
    },
    {
      "file": "app/api/appointments/route.js",
      "line": 91,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAppointments = ["
    },
    {
      "file": "app/api/ai/scheduling/route.js",
      "line": 73,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockRecommendations = ["
    },
    {
      "file": "app/api/ai/scheduling/route.js",
      "line": 176,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockPatterns = {"
    },
    {
      "file": "app/api/ai/scheduling/route.js",
      "line": 253,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockOptimization = {"
    },
    {
      "file": "app/api/ai/scheduling/route.js",
      "line": 319,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockMetrics = {"
    },
    {
      "file": "app/api/ai/scheduling/route.js",
      "line": 383,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockUpdate = {"
    },
    {
      "file": "app/api/ai/scheduling/route.js",
      "line": 420,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockConfigUpdate = {"
    },
    {
      "file": "app/api/ai/scheduling/route.js",
      "line": 454,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockRemoval = {"
    },
    {
      "file": "app/api/ai/scheduling/optimization/route.js",
      "line": 24,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockOptimization = {"
    },
    {
      "file": "app/api/ai/scheduling/optimization/route.js",
      "line": 123,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockApplication = {"
    },
    {
      "file": "app/api/ai/scheduling/optimization/route.js",
      "line": 173,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockPreferencesUpdate = {"
    },
    {
      "file": "app/api/ai/scheduling/analytics/route.js",
      "line": 24,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockAnalytics = {"
    },
    {
      "file": "app/api/ai/scheduling/analytics/route.js",
      "line": 301,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockCustomReport = {"
    },
    {
      "file": "app/api/ai/predictive-analytics/route.js",
      "line": 447,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({ length:",
      "context": "return Array.from({ length: 90 }, (_, i) => ({"
    },
    {
      "file": "app/api/ai/predictive/route.js",
      "line": 47,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "const mockPredictions = await generateMockPredictions(forecastType, timeHorizon)"
    },
    {
      "file": "app/api/ai/predictive/route.js",
      "line": 47,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockPredictions = await generateMockPredictions(forecastType, timeHorizon)"
    },
    {
      "file": "app/api/ai/predictive/route.js",
      "line": 244,
      "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
      "match": "generateMock",
      "context": "async function generateMockPredictions(forecastType = 'comprehensive', timeHorizon = 'weekly') {"
    },
    {
      "file": "app/api/ai/analytics/usage/route.js",
      "line": 83,
      "pattern": "Array\\.from\\(\\{.*length:",
      "match": "Array.from({ length:",
      "context": "const hourlyDistribution = Array.from({ length: 24 }, (_, hour) => ({"
    },
    {
      "file": "app/api/ai/agents/route.js",
      "line": 24,
      "pattern": "Test\\s+User",
      "match": "test user",
      "context": "// For placeholder auth, create a test user"
    },
    {
      "file": "app/api/admin/knowledge/entries/route.js",
      "line": 27,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockEntries = ["
    },
    {
      "file": "app/(protected)/shop/barbers/add/page.js",
      "line": 257,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "placeholder=\"John Doe\""
    },
    {
      "file": "app/(protected)/settings/page.js",
      "line": 108,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "name: user?.user_metadata?.full_name || 'John Doe',"
    },
    {
      "file": "app/(protected)/profile/page.js",
      "line": 79,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "{ id: 1, type: 'booking', message: 'Completed appointment with John Doe', time: '2 hours ago', icon:"
    },
    {
      "file": "app/(protected)/dashboard/settings/page.js",
      "line": 1608,
      "pattern": "John\\s+Doe",
      "match": "John Doe",
      "context": "placeholder=\"John Doe\""
    },
    {
      "file": "app/(protected)/dashboard/customers/page.js",
      "line": 27,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockCustomers = ["
    },
    {
      "file": "app/(protected)/dashboard/calendar/page.js",
      "line": 424,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockQuickLinks = ["
    },
    {
      "file": "app/(protected)/dashboard/alerts/page.js",
      "line": 25,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockUser = {"
    },
    {
      "file": "app/(protected)/dashboard/alerts/page.js",
      "line": 53,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockIntegrationStatus = {"
    },
    {
      "file": "app/(protected)/dashboard/alerts/page.js",
      "line": 293,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "const createTestAlert = async () => {"
    },
    {
      "file": "app/(protected)/dashboard/alerts/page.js",
      "line": 389,
      "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
      "match": "createTest",
      "context": "onClick={createTestAlert}"
    },
    {
      "file": "app/(protected)/barber/clients/page.js",
      "line": 33,
      "pattern": "(?:const|let|var)\\s+mock",
      "match": "const mock",
      "context": "const mockClients = ["
    }
  ],
  "violationsByFile": {
    "test_trafft_integration.js": [
      {
        "file": "test_trafft_integration.js",
        "line": 231,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAppointments = ["
      },
      {
        "file": "test_trafft_integration.js",
        "line": 237,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockCustomers = ["
      },
      {
        "file": "test_trafft_integration.js",
        "line": 242,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockServices = ["
      },
      {
        "file": "test_trafft_integration.js",
        "line": 248,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockEmployees = ["
      }
    ],
    "test_supabase_registration.js": [
      {
        "file": "test_supabase_registration.js",
        "line": 39,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "full_name: 'Test User',"
      }
    ],
    "test_orchestration_with_auth.js": [
      {
        "file": "test_orchestration_with_auth.js",
        "line": 76,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "async createTestUser() {"
      },
      {
        "file": "test_orchestration_with_auth.js",
        "line": 77,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('üîê Creating test user for authentication...')"
      },
      {
        "file": "test_orchestration_with_auth.js",
        "line": 86,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Try to register a new test user"
      },
      {
        "file": "test_orchestration_with_auth.js",
        "line": 97,
        "pattern": "Test\\s+User",
        "match": "Test user",
        "context": "console.log('‚úÖ Test user created and authenticated')"
      },
      {
        "file": "test_orchestration_with_auth.js",
        "line": 103,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Try with a known test user"
      },
      {
        "file": "test_orchestration_with_auth.js",
        "line": 118,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('‚úÖ Authenticated with existing test user')"
      },
      {
        "file": "test_orchestration_with_auth.js",
        "line": 339,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "const authenticated = await this.createTestUser()"
      }
    ],
    "test_multi_platform_integration.js": [
      {
        "file": "test_multi_platform_integration.js",
        "line": 105,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockGoogleEvent = {"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 107,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "summary: 'Haircut with John Doe',"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 111,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "attendees: [{ email: 'john.doe@email.com', displayName: 'John Doe' }],"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 124,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "this.assert(normalized.client.name === 'John Doe', 'Client name extraction')"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 148,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAcuityAppointment = {"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 203,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockSquareBooking = {"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 248,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "await this.createTestIntegrations()"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 267,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "async createTestIntegrations() {"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 332,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createMock",
        "context": "await this.createMockAppointments()"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 356,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createMock",
        "context": "async createMockAppointments() {"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 357,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAppointments = ["
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 363,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "name: 'John Doe',"
      },
      {
        "file": "test_multi_platform_integration.js",
        "line": 405,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "name: 'John Doe',"
      }
    ],
    "test_comprehensive_trafft_integration.js": [
      {
        "file": "test_comprehensive_trafft_integration.js",
        "line": 33,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const MOCK",
        "context": "const MOCK_DATA = {"
      },
      {
        "file": "test_comprehensive_trafft_integration.js",
        "line": 36,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "customerName: 'John Doe',"
      },
      {
        "file": "test_comprehensive_trafft_integration.js",
        "line": 438,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "return normalized.price === 75.00 && normalized.clientName === 'John Doe'"
      }
    ],
    "test_calendar_functionality.js": [
      {
        "file": "test_calendar_functionality.js",
        "line": 41,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockDataChecks = ["
      }
    ],
    "test-performance-improvement.js": [
      {
        "file": "test-performance-improvement.js",
        "line": 100,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "let mock",
        "context": "let mockDataFound = false"
      }
    ],
    "test-notification-integration.js": [
      {
        "file": "test-notification-integration.js",
        "line": 190,
        "pattern": "Jane\\s+Doe",
        "match": "Jane Doe",
        "context": "customerName: 'Jane Doe',"
      },
      {
        "file": "test-notification-integration.js",
        "line": 372,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = createNotificationData.appointmentConfirmation("
      }
    ],
    "test-internal-notifications.js": [
      {
        "file": "test-internal-notifications.js",
        "line": 11,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = {"
      }
    ],
    "seed-real-data.js": [
      {
        "file": "seed-real-data.js",
        "line": 117,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * service",
        "context": "service_name: services[Math.floor(Math.random() * services.length)],"
      }
    ],
    "seed-database.js": [
      {
        "file": "seed-database.js",
        "line": 67,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * service",
        "context": "service_name: services[Math.floor(Math.random() * services.length)],"
      }
    ],
    "populate-test-appointments.js": [
      {
        "file": "populate-test-appointments.js",
        "line": 21,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "{ name: 'John Doe', email: 'john@test.com', phone: '555-0101' },"
      },
      {
        "file": "populate-test-appointments.js",
        "line": 74,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * testCustomer",
        "context": "const customer = testCustomers[Math.floor(Math.random() * testCustomers.length)]"
      },
      {
        "file": "populate-test-appointments.js",
        "line": 76,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * service",
        "context": "const serviceIndex = Math.floor(Math.random() * serviceIds.length)"
      }
    ],
    "check-replication-status.js": [
      {
        "file": "check-replication-status.js",
        "line": 58,
        "pattern": "test@test\\.com",
        "match": "test@test.com",
        "context": "customer_email: 'test@test.com',"
      }
    ],
    "tests/auth.setup.js": [
      {
        "file": "tests/auth.setup.js",
        "line": 20,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockSession = {"
      },
      {
        "file": "tests/auth.setup.js",
        "line": 26,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "full_name: 'Playwright Test User'"
      }
    ],
    "tests/test-utils/nuclear-input-helpers.js": [
      {
        "file": "tests/test-utils/nuclear-input-helpers.js",
        "line": 159,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createMock",
        "context": "static createMockConsole() {"
      },
      {
        "file": "tests/test-utils/nuclear-input-helpers.js",
        "line": 320,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mocks = {"
      },
      {
        "file": "tests/test-utils/nuclear-input-helpers.js",
        "line": 534,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "export const testData = TestDataGenerator"
      },
      {
        "file": "tests/test-utils/nuclear-input-helpers.js",
        "line": 535,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockAPI = MockAPIFactory"
      }
    ],
    "test-utils/test-utils.js": [
      {
        "file": "test-utils/test-utils.js",
        "line": 31,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockUser = {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 34,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "name: 'Test User',"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 39,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockBarbershop = {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 52,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockAppointment = {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 64,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockService = {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 73,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockAgent = {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 80,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockAgentResponse = {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 106,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockApiResponse = (data, status = 200) => ({"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 114,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockFetch = (responses = {}) => {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 129,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockAuthSession = (user = mockUser) => {"
      },
      {
        "file": "test-utils/test-utils.js",
        "line": 137,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "export const mockTrafftData = {"
      }
    ],
    "test-utils/global-teardown.js": [
      {
        "file": "test-utils/global-teardown.js",
        "line": 14,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateTest",
        "context": "await generateTestSummary()"
      },
      {
        "file": "test-utils/global-teardown.js",
        "line": 34,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateTest",
        "context": "async function generateTestSummary() {"
      }
    ],
    "test-utils/global-setup.js": [
      {
        "file": "test-utils/global-setup.js",
        "line": 184,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = {"
      },
      {
        "file": "test-utils/global-setup.js",
        "line": 189,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "name: 'Test User',"
      },
      {
        "file": "test-utils/global-setup.js",
        "line": 228,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testDataPath = path.join(__dirname, '../test-results/test-data.json')"
      }
    ],
    "test-utils/custom-reporter.js": [
      {
        "file": "test-utils/custom-reporter.js",
        "line": 326,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateTest",
        "context": "${this.generateTestItems()}"
      },
      {
        "file": "test-utils/custom-reporter.js",
        "line": 372,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateTest",
        "context": "generateTestItems() {"
      }
    ],
    "services/integrations/data-normalization-service.js": [
      {
        "file": "services/integrations/data-normalization-service.js",
        "line": 196,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "name: appointment.serviceName || 'Service',"
      },
      {
        "file": "services/integrations/data-normalization-service.js",
        "line": 258,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "name: appointment.serviceName || 'Service',"
      },
      {
        "file": "services/integrations/data-normalization-service.js",
        "line": 333,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "if (!title) return 'Service'"
      },
      {
        "file": "services/integrations/data-normalization-service.js",
        "line": 335,
        "pattern": "[\"']Service[\"']",
        "match": "\"Service\"",
        "context": "// Common patterns: \"Service - Customer\", \"Customer - Service\", \"Service\""
      }
    ],
    "scripts/test-supabase-real-email.js": [
      {
        "file": "scripts/test-supabase-real-email.js",
        "line": 25,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "full_name: 'Test User',"
      }
    ],
    "scripts/test-supabase-auth.js": [
      {
        "file": "scripts/test-supabase-auth.js",
        "line": 31,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Test 2: Try to register a test user to see what happens"
      },
      {
        "file": "scripts/test-supabase-auth.js",
        "line": 41,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "full_name: 'Test User'"
      },
      {
        "file": "scripts/test-supabase-auth.js",
        "line": 65,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Test 3: Try to resend email for the test user"
      }
    ],
    "scripts/test-registration.js": [
      {
        "file": "scripts/test-registration.js",
        "line": 34,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "full_name: 'Test User',"
      }
    ],
    "scripts/test-recurring-with-real-data.js": [
      {
        "file": "scripts/test-recurring-with-real-data.js",
        "line": 234,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = await getTestData();"
      }
    ],
    "scripts/test-recurring-display-bug.js": [
      {
        "file": "scripts/test-recurring-display-bug.js",
        "line": 39,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "async function createTestRecurringAppointment() {"
      },
      {
        "file": "scripts/test-recurring-display-bug.js",
        "line": 218,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "const appointment = await createTestRecurringAppointment();"
      }
    ],
    "scripts/test-new-recurring-system.js": [
      {
        "file": "scripts/test-new-recurring-system.js",
        "line": 412,
        "pattern": "(?:const|let|var)\\s+sample",
        "match": "const sample",
        "context": "const sample = data[0];"
      }
    ],
    "scripts/test-full-registration.js": [
      {
        "file": "scripts/test-full-registration.js",
        "line": 19,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = {"
      },
      {
        "file": "scripts/test-full-registration.js",
        "line": 133,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Sign out the test user"
      }
    ],
    "scripts/test-complete-registration-flow.js": [
      {
        "file": "scripts/test-complete-registration-flow.js",
        "line": 22,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = {"
      }
    ],
    "scripts/seed-test-data.js": [
      {
        "file": "scripts/seed-test-data.js",
        "line": 41,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = {"
      },
      {
        "file": "scripts/seed-test-data.js",
        "line": 169,
        "pattern": "Test\\s+User",
        "match": "Test user",
        "context": "// Test users (will be created with auth.users)"
      },
      {
        "file": "scripts/seed-test-data.js",
        "line": 213,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Step 1: Create test users"
      },
      {
        "file": "scripts/seed-test-data.js",
        "line": 214,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('üë§ Creating test users...')"
      },
      {
        "file": "scripts/seed-test-data.js",
        "line": 396,
        "pattern": "(?:const|let|var)\\s+sample",
        "match": "const sample",
        "context": "const sampleCustomers = ["
      }
    ],
    "scripts/run-recurring-migration.js": [
      {
        "file": "scripts/run-recurring-migration.js",
        "line": 138,
        "pattern": "(?:const|let|var)\\s+sample",
        "match": "const sample",
        "context": "const sample = bookings[0];"
      }
    ],
    "scripts/generate-sample-data.js": [
      {
        "file": "scripts/generate-sample-data.js",
        "line": 40,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateSampleData",
        "context": "async function generateSampleData() {"
      },
      {
        "file": "scripts/generate-sample-data.js",
        "line": 114,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateSampleData",
        "context": "generateSampleData()"
      },
      {
        "file": "scripts/generate-sample-data.js",
        "line": 117,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateSampleData",
        "context": "export default generateSampleData"
      }
    ],
    "scripts/generate-comprehensive-data.js": [
      {
        "file": "scripts/generate-comprehensive-data.js",
        "line": 48,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateTestData",
        "context": "async function generateTestData() {"
      },
      {
        "file": "scripts/generate-comprehensive-data.js",
        "line": 424,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateTestData",
        "context": "generateTestData()"
      }
    ],
    "scripts/fix-service-data.js": [
      {
        "file": "scripts/fix-service-data.js",
        "line": 107,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "const availableServices = servicesList.filter(s => s.name !== 'Service')"
      },
      {
        "file": "scripts/fix-service-data.js",
        "line": 122,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * availableService",
        "context": "const randomService = availableServices[Math.floor(Math.random() * availableServices.length)]"
      },
      {
        "file": "scripts/fix-service-data.js",
        "line": 147,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * availableService",
        "context": "const randomService = availableServices[Math.floor(Math.random() * availableServices.length)]"
      },
      {
        "file": "scripts/fix-service-data.js",
        "line": 218,
        "pattern": "[\"']Service[\"']",
        "match": "\"Service\"",
        "context": "console.log('   - The \"Service\" option should no longer appear in filters')"
      }
    ],
    "scripts/find-mock-data.js": [
      {
        "file": "scripts/find-mock-data.js",
        "line": 8,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "'generateMock',"
      },
      {
        "file": "scripts/find-mock-data.js",
        "line": 96,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockInstances = []"
      },
      {
        "file": "scripts/find-mock-data.js",
        "line": 235,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "'Replace generateMock* functions with database query functions',"
      }
    ],
    "scripts/debug-email-verification.js": [
      {
        "file": "scripts/debug-email-verification.js",
        "line": 32,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "full_name: 'Debug Test User',"
      },
      {
        "file": "scripts/debug-email-verification.js",
        "line": 151,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Cleanup: Try to delete the test user (optional)"
      },
      {
        "file": "scripts/debug-email-verification.js",
        "line": 154,
        "pattern": "Test\\s+User",
        "match": "Test user",
        "context": "console.log('Test user created with ID:', data.user?.id)"
      }
    ],
    "scripts/create-test-user.js": [
      {
        "file": "scripts/create-test-user.js",
        "line": 18,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "async function createTestUser() {"
      },
      {
        "file": "scripts/create-test-user.js",
        "line": 19,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('üöÄ Creating test user account...\\n');"
      },
      {
        "file": "scripts/create-test-user.js",
        "line": 24,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "full_name: 'Test User',"
      },
      {
        "file": "scripts/create-test-user.js",
        "line": 57,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "console.log('\\nüìù Test User Credentials:');"
      },
      {
        "file": "scripts/create-test-user.js",
        "line": 69,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.error('‚ùå Error creating test user:', error.message);"
      },
      {
        "file": "scripts/create-test-user.js",
        "line": 75,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "createTestUser();"
      }
    ],
    "scripts/create-test-data.js": [
      {
        "file": "scripts/create-test-data.js",
        "line": 90,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTestData",
        "context": "async function createTestData() {"
      },
      {
        "file": "scripts/create-test-data.js",
        "line": 183,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * 4) + 6 // 6-9 service",
        "context": "const numServices = Math.floor(Math.random() * 4) + 6 // 6-9 services per shop"
      },
      {
        "file": "scripts/create-test-data.js",
        "line": 374,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTestData",
        "context": "createTestData().catch(console.error)"
      },
      {
        "file": "scripts/create-test-data.js",
        "line": 377,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTestData",
        "context": "export default createTestData"
      }
    ],
    "scripts/create-tables-simple.js": [
      {
        "file": "scripts/create-tables-simple.js",
        "line": 43,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = {"
      }
    ],
    "scripts/cleanup-test-users.js": [
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 19,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "console.log('üßπ Cleaning Up Test Users\\n');"
      },
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 33,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('üîç Finding test users...');"
      },
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 43,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Filter test users (emails containing 'test' or from our test domains)"
      },
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 56,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log(`\\nüìã Found ${testUsers.length} test users:`);"
      },
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 60,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('‚úÖ No test users found to clean up');"
      },
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 86,
        "pattern": "Test\\s+User",
        "match": "Test User",
        "context": "console.log('üí° Delete All Test Users (use carefully):');"
      },
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 96,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('‚Ä¢ Consider keeping one test user for ongoing testing');"
      },
      {
        "file": "scripts/cleanup-test-users.js",
        "line": 101,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "console.log('1. Keep one verified test user for ongoing testing');"
      }
    ],
    "scripts/check-email-settings.js": [
      {
        "file": "scripts/check-email-settings.js",
        "line": 37,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Try to sign up a test user to check if emails are being sent"
      },
      {
        "file": "scripts/check-email-settings.js",
        "line": 53,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Clean up test user if created"
      },
      {
        "file": "scripts/check-email-settings.js",
        "line": 80,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// Test with a known user (the test user we created)"
      },
      {
        "file": "scripts/check-email-settings.js",
        "line": 85,
        "pattern": "Test\\s+User",
        "match": "Test user",
        "context": "console.log(`   üë§ Test user verified: ${testUser.user.email_confirmed_at ? 'Yes' : 'No'}`);"
      }
    ],
    "lib/seo-utils.js": [
      {
        "file": "lib/seo-utils.js",
        "line": 147,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "'@type': 'Service',"
      }
    ],
    "lib/calendar-data.js": [
      {
        "file": "lib/calendar-data.js",
        "line": 83,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "export function generateMockEvents(date = new Date(), resources = DEFAULT_RESOURCES, services = DEFA"
      },
      {
        "file": "lib/calendar-data.js",
        "line": 85,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "const customers = ['John Doe', 'Jane Smith', 'Bob Wilson', 'Alice Brown', 'Charlie Davis', 'Emma Joh"
      },
      {
        "file": "lib/calendar-data.js",
        "line": 101,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * service",
        "context": "const service = services[Math.floor(Math.random() * services.length)]"
      },
      {
        "file": "lib/calendar-data.js",
        "line": 102,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * customer",
        "context": "const customer = customers[Math.floor(Math.random() * customers.length)]"
      },
      {
        "file": "lib/calendar-data.js",
        "line": 193,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${appointment.client_name || 'Client'} - ${appointment.service?.name || 'Service'}`,"
      },
      {
        "file": "lib/calendar-data.js",
        "line": 216,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "const headers = ['Date', 'Start Time', 'End Time', 'Customer', 'Service', 'Barber', 'Duration (min)'"
      }
    ],
    "lib/notifications/notification-service.js": [
      {
        "file": "lib/notifications/notification-service.js",
        "line": 158,
        "pattern": "(?:const|let|var)\\s+testData",
        "match": "const testData",
        "context": "const testData = {"
      }
    ],
    "hooks/useTenantAnalytics.js": [
      {
        "file": "hooks/useTenantAnalytics.js",
        "line": 39,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const mockAnalytics = generateMockTenantAnalytics(tenant, dateRange, filters)"
      },
      {
        "file": "hooks/useTenantAnalytics.js",
        "line": 39,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAnalytics = generateMockTenantAnalytics(tenant, dateRange, filters)"
      },
      {
        "file": "hooks/useTenantAnalytics.js",
        "line": 83,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const mockPlatformData = generateMockPlatformAnalytics(dateRange)"
      },
      {
        "file": "hooks/useTenantAnalytics.js",
        "line": 83,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockPlatformData = generateMockPlatformAnalytics(dateRange)"
      },
      {
        "file": "hooks/useTenantAnalytics.js",
        "line": 108,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "function generateMockTenantAnalytics(tenant, dateRange, filters) {"
      },
      {
        "file": "hooks/useTenantAnalytics.js",
        "line": 178,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "function generateMockPlatformAnalytics(dateRange) {"
      }
    ],
    "hooks/useRealtimeAppointmentsWorking.js": [
      {
        "file": "hooks/useRealtimeAppointmentsWorking.js",
        "line": 119,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "? `‚ùå ${appointment.extendedProps?.customer || 'Customer'} - ${appointment.extendedProps?.service || "
      }
    ],
    "hooks/useRealtimeAppointmentsV2.js": [
      {
        "file": "hooks/useRealtimeAppointmentsV2.js",
        "line": 82,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customer_name || 'Customer'} - ${booking.service_name ||"
      }
    ],
    "hooks/useRealtimeAppointmentsSimple.js": [
      {
        "file": "hooks/useRealtimeAppointmentsSimple.js",
        "line": 26,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customer_name || 'Customer'} - ${booking.service_name ||"
      }
    ],
    "hooks/useRealtimeAppointmentsFixed.js": [
      {
        "file": "hooks/useRealtimeAppointmentsFixed.js",
        "line": 80,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customers?.name || booking.customer_name || 'Customer'} "
      },
      {
        "file": "hooks/useRealtimeAppointmentsFixed.js",
        "line": 154,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${isCancelled ? '‚ùå ' : ''}${newBooking.customers?.name || newBooking.customer_name || 'Custo"
      },
      {
        "file": "hooks/useRealtimeAppointmentsFixed.js",
        "line": 204,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${isCancelled ? '‚ùå ' : ''}${updatedBooking.customers?.name || 'Customer'} - ${updatedBooking"
      }
    ],
    "hooks/useRealtimeAppointments.js": [
      {
        "file": "hooks/useRealtimeAppointments.js",
        "line": 122,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${isCancelled ? '‚ùå ' : ''}${booking.customers?.name || booking.customer_name || 'Customer'} "
      },
      {
        "file": "hooks/useRealtimeAppointments.js",
        "line": 253,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${payload.new.customer_name || 'Customer'} - ${payload.new.service_name || 'Service'}`,"
      },
      {
        "file": "hooks/useRealtimeAppointments.js",
        "line": 283,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${isCancelled ? '‚ùå ' : ''}${newBooking.customers?.name || newBooking.customer_name || 'Custo"
      },
      {
        "file": "hooks/useRealtimeAppointments.js",
        "line": 384,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "? `‚ùå ${appointment.extendedProps?.customer || 'Customer'} - ${appointment.extendedProps?.service || "
      }
    ],
    "hooks/useRealtime.js": [
      {
        "file": "hooks/useRealtime.js",
        "line": 4,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createMock",
        "context": "const createMockPusher = (key, options) => {"
      },
      {
        "file": "hooks/useRealtime.js",
        "line": 49,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const mockData = generateMockMetrics()"
      },
      {
        "file": "hooks/useRealtime.js",
        "line": 49,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockData = generateMockMetrics()"
      },
      {
        "file": "hooks/useRealtime.js",
        "line": 68,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const mockNotification = generateMockNotification()"
      },
      {
        "file": "hooks/useRealtime.js",
        "line": 68,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockNotification = generateMockNotification()"
      },
      {
        "file": "hooks/useRealtime.js",
        "line": 83,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const generateMockMetrics = () => {"
      },
      {
        "file": "hooks/useRealtime.js",
        "line": 100,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const generateMockNotification = () => {"
      },
      {
        "file": "hooks/useRealtime.js",
        "line": 175,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createMock",
        "context": "const pusher = createMockPusher(data.pusherConfig.key, {"
      }
    ],
    "examples/notification-usage-examples.js": [
      {
        "file": "examples/notification-usage-examples.js",
        "line": 193,
        "pattern": "Jane\\s+Doe",
        "match": "Jane Doe",
        "context": "name: 'Jane Doe',"
      }
    ],
    "database/seed-test-data.js": [
      {
        "file": "database/seed-test-data.js",
        "line": 184,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * customer",
        "context": "const customerId = customerIds[Math.floor(Math.random() * customerIds.length)]"
      },
      {
        "file": "database/seed-test-data.js",
        "line": 185,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * service",
        "context": "const service = services[Math.floor(Math.random() * services.length)]"
      },
      {
        "file": "database/seed-test-data.js",
        "line": 261,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * customer",
        "context": "customer_id: customerIds[Math.floor(Math.random() * customerIds.length)],"
      }
    ],
    "contexts/TenantContext.js": [
      {
        "file": "contexts/TenantContext.js",
        "line": 60,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockTenant = {"
      }
    ],
    "components/LoadingSpinner.js": [
      {
        "file": "components/LoadingSpinner.js",
        "line": 69,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({ length:",
        "context": "{Array.from({ length: rows }).map((_, i) => ("
      }
    ],
    "components/DashboardHeader.js": [
      {
        "file": "components/DashboardHeader.js",
        "line": 97,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "{ id: 1, message: 'New booking from John Doe', time: '5 min ago', read: false },"
      }
    ],
    "components/navigation/MobileHeader.js": [
      {
        "file": "components/navigation/MobileHeader.js",
        "line": 22,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockNotifications = ["
      }
    ],
    "components/monitoring/SystemMonitoringDashboard.js": [
      {
        "file": "components/monitoring/SystemMonitoringDashboard.js",
        "line": 75,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockMetrics = {"
      }
    ],
    "components/dashboard/ActionCenter.js": [
      {
        "file": "components/dashboard/ActionCenter.js",
        "line": 358,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "{appointment.service_name || 'Service'} with {appointment.barber_name || 'Barber'}"
      }
    ],
    "components/calendar/FinalProfessionalCalendar.js": [
      {
        "file": "components/calendar/FinalProfessionalCalendar.js",
        "line": 32,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "title: 'John Doe - Haircut',"
      }
    ],
    "components/booking/BookingWizard.js": [
      {
        "file": "components/booking/BookingWizard.js",
        "line": 69,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockSettings = {"
      },
      {
        "file": "components/booking/BookingWizard.js",
        "line": 98,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "{ number: 3, title: 'Service', component: ServiceStep },"
      },
      {
        "file": "components/booking/BookingWizard.js",
        "line": 98,
        "pattern": "title:\\s*[\"'].*Service[\"']",
        "match": "title: 'Service'",
        "context": "{ number: 3, title: 'Service', component: ServiceStep },"
      }
    ],
    "components/booking/steps/TimeStep.js": [
      {
        "file": "components/booking/steps/TimeStep.js",
        "line": 80,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBooked = Math.random() > 0.7 // 30% chance of being booked"
      }
    ],
    "components/booking/steps/PaymentStep.js": [
      {
        "file": "components/booking/steps/PaymentStep.js",
        "line": 94,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockCards = ["
      },
      {
        "file": "components/booking/steps/PaymentStep.js",
        "line": 322,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "placeholder=\"John Doe\""
      }
    ],
    "components/booking/steps/LocationStep.js": [
      {
        "file": "components/booking/steps/LocationStep.js",
        "line": 20,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockLocations = ["
      }
    ],
    "components/booking/steps/BarberStep.js": [
      {
        "file": "components/booking/steps/BarberStep.js",
        "line": 20,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBarbers = ["
      }
    ],
    "components/barber/CreateBookingLinkModal.js": [
      {
        "file": "components/barber/CreateBookingLinkModal.js",
        "line": 38,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockServices = ["
      }
    ],
    "archive/recurring-system-v1/test-files/test-recurring-delete.js": [
      {
        "file": "archive/recurring-system-v1/test-files/test-recurring-delete.js",
        "line": 11,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "async function createTestRecurringAppointment() {"
      },
      {
        "file": "archive/recurring-system-v1/test-files/test-recurring-delete.js",
        "line": 68,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "createTestRecurringAppointment();"
      }
    ],
    "archive/recurring-system-v1/old-routes/route-old.js": [
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 57,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const mockAppointments = generateMockAppointments()"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 57,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAppointments = generateMockAppointments()"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 131,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "const serviceName = service.name || booking.service_name || 'Service'"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 181,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${appointment.clients?.name || appointment.client_name || 'Customer'} - ${appointment.servic"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 374,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "function generateMockAppointments() {"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 378,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "const customers = ['John Doe', 'Jane Smith', 'Bob Wilson', 'Alice Brown']"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 404,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * customer",
        "context": "const customerName = customers[Math.floor(Math.random() * customers.length)]"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 405,
        "pattern": "Math\\.random\\(\\).*(?:Customer|User|Product|Service)",
        "match": "Math.random() * service",
        "context": "const serviceIndex = Math.floor(Math.random() * services.length)"
      },
      {
        "file": "archive/recurring-system-v1/old-routes/route-old.js",
        "line": 496,
        "pattern": "[\"']Service[\"']",
        "match": "'Service'",
        "context": "title: `${booking.customers?.name || 'Customer'} - ${booking.services?.name || 'Service'}`,"
      }
    ],
    "app/page.js": [
      {
        "file": "app/page.js",
        "line": 41,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBarbershops = ["
      },
      {
        "file": "app/page.js",
        "line": 309,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({ length:",
        "context": "{Array.from({ length: 5 }).map((_, i) => ("
      }
    ],
    "app/test-shadcn/page.js": [
      {
        "file": "app/test-shadcn/page.js",
        "line": 23,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "{ id: '1', title: 'John Doe', color: '#3b82f6' },"
      }
    ],
    "app/payments/page.js": [
      {
        "file": "app/payments/page.js",
        "line": 19,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockPayments = ["
      },
      {
        "file": "app/payments/page.js",
        "line": 64,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockStats = {"
      }
    ],
    "app/dashboard/staff/page.js": [
      {
        "file": "app/dashboard/staff/page.js",
        "line": 25,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockStaff = ["
      }
    ],
    "app/dashboard/services/page.js": [
      {
        "file": "app/dashboard/services/page.js",
        "line": 32,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockServices = ["
      }
    ],
    "app/dashboard/inventory/page.js": [
      {
        "file": "app/dashboard/inventory/page.js",
        "line": 34,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockInventory = ["
      }
    ],
    "app/customers/page.js": [
      {
        "file": "app/customers/page.js",
        "line": 21,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockCustomers = ["
      }
    ],
    "app/bookings/[id]/page.js": [
      {
        "file": "app/bookings/[id]/page.js",
        "line": 37,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBooking = {"
      },
      {
        "file": "app/bookings/[id]/page.js",
        "line": 71,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "name: 'John Doe',"
      }
    ],
    "app/bookings/[id]/success/page.js": [
      {
        "file": "app/bookings/[id]/success/page.js",
        "line": 29,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBooking = {"
      },
      {
        "file": "app/bookings/[id]/success/page.js",
        "line": 48,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "name: 'John Doe',"
      }
    ],
    "app/book/page.js": [
      {
        "file": "app/book/page.js",
        "line": 332,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({ length:",
        "context": "const dates = Array.from({ length: 7 }, (_, i) => {"
      }
    ],
    "app/book/[barberId]/page.js": [
      {
        "file": "app/book/[barberId]/page.js",
        "line": 113,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBarber = {"
      },
      {
        "file": "app/book/[barberId]/page.js",
        "line": 138,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockServices = ["
      }
    ],
    "app/book/[barberId]/layout.js": [
      {
        "file": "app/book/[barberId]/layout.js",
        "line": 6,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBarber = {"
      }
    ],
    "app/api/waitlist/matches/route.js": [
      {
        "file": "app/api/waitlist/matches/route.js",
        "line": 95,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "customer_name: 'John Doe',"
      }
    ],
    "app/api/services/route.js": [
      {
        "file": "app/api/services/route.js",
        "line": 62,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockServices = ["
      }
    ],
    "app/api/realtime/metrics/route.js": [
      {
        "file": "app/api/realtime/metrics/route.js",
        "line": 117,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({ length:",
        "context": "hourlyRevenue: Array.from({ length: 7 }, (_, i) => {"
      }
    ],
    "app/api/forecasting/trends/route.js": [
      {
        "file": "app/api/forecasting/trends/route.js",
        "line": 662,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({length:",
        "context": "Array.from({length: windowSize}, (_, i) => i),"
      },
      {
        "file": "app/api/forecasting/trends/route.js",
        "line": 684,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({length:",
        "context": "Array.from({length: windowSize}, (_, i) => i),"
      },
      {
        "file": "app/api/forecasting/trends/route.js",
        "line": 688,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({length:",
        "context": "Array.from({length: windowSize}, (_, i) => i),"
      }
    ],
    "app/api/cancellations/process/route.js": [
      {
        "file": "app/api/cancellations/process/route.js",
        "line": 117,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBooking = {"
      }
    ],
    "app/api/calendar/sync/route.js": [
      {
        "file": "app/api/calendar/sync/route.js",
        "line": 81,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockSyncHistory = ["
      }
    ],
    "app/api/calendar/settings/route.js": [
      {
        "file": "app/api/calendar/settings/route.js",
        "line": 19,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockSettings = {"
      }
    ],
    "app/api/calendar/outlook/auth/route.js": [
      {
        "file": "app/api/calendar/outlook/auth/route.js",
        "line": 18,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAuthUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=demo&r"
      }
    ],
    "app/api/calendar/google/auth/route.js": [
      {
        "file": "app/api/calendar/google/auth/route.js",
        "line": 18,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAuthUrl = `https://accounts.google.com/oauth2/auth?client_id=demo&redirect_uri=${encodeURI"
      }
    ],
    "app/api/calendar/accounts/route.js": [
      {
        "file": "app/api/calendar/accounts/route.js",
        "line": 18,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAccounts = ["
      }
    ],
    "app/api/billing/route.js": [
      {
        "file": "app/api/billing/route.js",
        "line": 87,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockSubscription = {"
      },
      {
        "file": "app/api/billing/route.js",
        "line": 116,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockUsage = {"
      },
      {
        "file": "app/api/billing/route.js",
        "line": 280,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockCustomerId = 'cus_demo_customer'"
      }
    ],
    "app/api/barbers/route.js": [
      {
        "file": "app/api/barbers/route.js",
        "line": 23,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockBarbers = ["
      }
    ],
    "app/api/appointments/route.js": [
      {
        "file": "app/api/appointments/route.js",
        "line": 91,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAppointments = ["
      }
    ],
    "app/api/ai/scheduling/route.js": [
      {
        "file": "app/api/ai/scheduling/route.js",
        "line": 73,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockRecommendations = ["
      },
      {
        "file": "app/api/ai/scheduling/route.js",
        "line": 176,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockPatterns = {"
      },
      {
        "file": "app/api/ai/scheduling/route.js",
        "line": 253,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockOptimization = {"
      },
      {
        "file": "app/api/ai/scheduling/route.js",
        "line": 319,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockMetrics = {"
      },
      {
        "file": "app/api/ai/scheduling/route.js",
        "line": 383,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockUpdate = {"
      },
      {
        "file": "app/api/ai/scheduling/route.js",
        "line": 420,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockConfigUpdate = {"
      },
      {
        "file": "app/api/ai/scheduling/route.js",
        "line": 454,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockRemoval = {"
      }
    ],
    "app/api/ai/scheduling/optimization/route.js": [
      {
        "file": "app/api/ai/scheduling/optimization/route.js",
        "line": 24,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockOptimization = {"
      },
      {
        "file": "app/api/ai/scheduling/optimization/route.js",
        "line": 123,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockApplication = {"
      },
      {
        "file": "app/api/ai/scheduling/optimization/route.js",
        "line": 173,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockPreferencesUpdate = {"
      }
    ],
    "app/api/ai/scheduling/analytics/route.js": [
      {
        "file": "app/api/ai/scheduling/analytics/route.js",
        "line": 24,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockAnalytics = {"
      },
      {
        "file": "app/api/ai/scheduling/analytics/route.js",
        "line": 301,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockCustomReport = {"
      }
    ],
    "app/api/ai/predictive-analytics/route.js": [
      {
        "file": "app/api/ai/predictive-analytics/route.js",
        "line": 447,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({ length:",
        "context": "return Array.from({ length: 90 }, (_, i) => ({"
      }
    ],
    "app/api/ai/predictive/route.js": [
      {
        "file": "app/api/ai/predictive/route.js",
        "line": 47,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "const mockPredictions = await generateMockPredictions(forecastType, timeHorizon)"
      },
      {
        "file": "app/api/ai/predictive/route.js",
        "line": 47,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockPredictions = await generateMockPredictions(forecastType, timeHorizon)"
      },
      {
        "file": "app/api/ai/predictive/route.js",
        "line": 244,
        "pattern": "generate(Mock|Fake|Dummy|Test|Sample|Random)(?:Data)?",
        "match": "generateMock",
        "context": "async function generateMockPredictions(forecastType = 'comprehensive', timeHorizon = 'weekly') {"
      }
    ],
    "app/api/ai/analytics/usage/route.js": [
      {
        "file": "app/api/ai/analytics/usage/route.js",
        "line": 83,
        "pattern": "Array\\.from\\(\\{.*length:",
        "match": "Array.from({ length:",
        "context": "const hourlyDistribution = Array.from({ length: 24 }, (_, hour) => ({"
      }
    ],
    "app/api/ai/agents/route.js": [
      {
        "file": "app/api/ai/agents/route.js",
        "line": 24,
        "pattern": "Test\\s+User",
        "match": "test user",
        "context": "// For placeholder auth, create a test user"
      }
    ],
    "app/api/admin/knowledge/entries/route.js": [
      {
        "file": "app/api/admin/knowledge/entries/route.js",
        "line": 27,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockEntries = ["
      }
    ],
    "app/(protected)/shop/barbers/add/page.js": [
      {
        "file": "app/(protected)/shop/barbers/add/page.js",
        "line": 257,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "placeholder=\"John Doe\""
      }
    ],
    "app/(protected)/settings/page.js": [
      {
        "file": "app/(protected)/settings/page.js",
        "line": 108,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "name: user?.user_metadata?.full_name || 'John Doe',"
      }
    ],
    "app/(protected)/profile/page.js": [
      {
        "file": "app/(protected)/profile/page.js",
        "line": 79,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "{ id: 1, type: 'booking', message: 'Completed appointment with John Doe', time: '2 hours ago', icon:"
      }
    ],
    "app/(protected)/dashboard/settings/page.js": [
      {
        "file": "app/(protected)/dashboard/settings/page.js",
        "line": 1608,
        "pattern": "John\\s+Doe",
        "match": "John Doe",
        "context": "placeholder=\"John Doe\""
      }
    ],
    "app/(protected)/dashboard/customers/page.js": [
      {
        "file": "app/(protected)/dashboard/customers/page.js",
        "line": 27,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockCustomers = ["
      }
    ],
    "app/(protected)/dashboard/calendar/page.js": [
      {
        "file": "app/(protected)/dashboard/calendar/page.js",
        "line": 424,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockQuickLinks = ["
      }
    ],
    "app/(protected)/dashboard/alerts/page.js": [
      {
        "file": "app/(protected)/dashboard/alerts/page.js",
        "line": 25,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockUser = {"
      },
      {
        "file": "app/(protected)/dashboard/alerts/page.js",
        "line": 53,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockIntegrationStatus = {"
      },
      {
        "file": "app/(protected)/dashboard/alerts/page.js",
        "line": 293,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "const createTestAlert = async () => {"
      },
      {
        "file": "app/(protected)/dashboard/alerts/page.js",
        "line": 389,
        "pattern": "create(Mock|Fake|Dummy|Test|Sample)(?:Data)?",
        "match": "createTest",
        "context": "onClick={createTestAlert}"
      }
    ],
    "app/(protected)/barber/clients/page.js": [
      {
        "file": "app/(protected)/barber/clients/page.js",
        "line": 33,
        "pattern": "(?:const|let|var)\\s+mock",
        "match": "const mock",
        "context": "const mockClients = ["
      }
    ]
  }
}