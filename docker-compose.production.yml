version: '3.8'

services:
  # Production PostgreSQL Database with Security Hardening
  postgres:
    image: postgres:15-alpine
    container_name: agent-system-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-agent_system}
      POSTGRES_USER: ${DB_USER:-agent_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgresql_config.py:/docker-entrypoint-initdb.d/init.sql:ro
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./configs/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    networks:
      - secure-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_statement=all
      -c log_connections=on
      -c log_disconnections=on
      -c shared_preload_libraries=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for Session Management and Caching
  redis:
    image: redis:7-alpine
    container_name: agent-system-redis-prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    networks:
      - secure-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Secure FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.secure
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    container_name: agent-system-backend-prod
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-agent_system}
      DB_USER: ${DB_USER:-agent_user}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: postgresql://${DB_USER:-agent_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-agent_system}?sslmode=require
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRES: ${ACCESS_TOKEN_EXPIRES:-1800}
      REFRESH_TOKEN_EXPIRES: ${REFRESH_TOKEN_EXPIRES:-604800}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-1000}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-3600}
      AUTH_RATE_LIMIT: ${AUTH_RATE_LIMIT:-10}
      AUTH_RATE_WINDOW: ${AUTH_RATE_WINDOW:-300}
      
      # CORS Configuration
      FRONTEND_URL: ${FRONTEND_URL:-https://agent.6fb.ai}
      PRODUCTION_URL: ${PRODUCTION_URL:-https://agent.6fb.ai}
      STAGING_URL: ${STAGING_URL:-https://staging-agent.6fb.ai}
      
      # Environment
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Monitoring
      ENABLE_MONITORING: "true"
      METRICS_PORT: 8090
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus
      
      # Notification Configuration
      EMAIL_NOTIFICATIONS_ENABLED: ${EMAIL_NOTIFICATIONS_ENABLED:-true}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL:-security@6fb.ai}
      SECURITY_ALERT_EMAILS: ${SECURITY_ALERT_EMAILS}
      
      # Webhook Notifications
      WEBHOOK_NOTIFICATIONS_ENABLED: ${WEBHOOK_NOTIFICATIONS_ENABLED:-true}
      SECURITY_WEBHOOK_URL: ${SECURITY_WEBHOOK_URL}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      
      # GDPR Compliance
      GDPR_COMPLIANCE_ENABLED: "true"
      DATA_RETENTION_DAYS: ${DATA_RETENTION_DAYS:-365}
      AUDIT_LOG_RETENTION_DAYS: ${AUDIT_LOG_RETENTION_DAYS:-2555}  # 7 years
      
      # Backup Configuration
      BACKUP_ENABLED: "true"
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      BACKUP_S3_REGION: ${BACKUP_S3_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      
    volumes:
      - ./logs:/app/logs
      - backup_data:/app/backups
      - prometheus_data:/tmp/prometheus
    ports:
      - "127.0.0.1:8001:8000"
    networks:
      - secure-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
    user: "1000:1000"  # Non-root user
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Secure Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.secure
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.6fb.ai}
        NEXT_PUBLIC_ENVIRONMENT: production
    container_name: agent-system-frontend-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.6fb.ai}
      NEXT_PUBLIC_ENVIRONMENT: production
      NEXT_PUBLIC_VERSION: ${VERSION}
      
      # Feature Flags
      NEXT_PUBLIC_ENABLE_RAG: "true"
      NEXT_PUBLIC_ENABLE_ANALYTICS: "true"
      NEXT_PUBLIC_ENABLE_MONITORING: "true"
      
      # Security Headers
      NEXT_PUBLIC_CSP_NONCE: ${CSP_NONCE}
      
    ports:
      - "127.0.0.1:9999:3000"
    networks:
      - secure-network
    depends_on:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    user: "1000:1000"  # Non-root user
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy with Security Headers
  nginx:
    build:
      context: ./configs/nginx
      dockerfile: Dockerfile
    container_name: agent-system-nginx-prod
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
      - ./configs/nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - secure-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-system-prometheus-prod
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - secure-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agent-system-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "127.0.0.1:3001:3000"
    networks:
      - secure-network
    depends_on:
      - prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # grafana user
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Log Aggregation (using Loki)
  loki:
    image: grafana/loki:2.9.0
    container_name: agent-system-loki-prod
    ports:
      - "127.0.0.1:3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - secure-network
    volumes:
      - loki_data:/loki
      - ./configs/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Log Collector (Promtail)
  promtail:
    image: grafana/promtail:2.9.0
    container_name: agent-system-promtail-prod
    volumes:
      - ./logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/log:/var/log/host:ro
      - ./configs/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - secure-network
    depends_on:
      - loki
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

# Secure Network Configuration
networks:
  secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication by default
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Persistent Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/grafana
  
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/loki
  
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/backups
  
  nginx_logs:
    driver: local