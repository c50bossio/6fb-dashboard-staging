# PostgreSQL Host-Based Authentication Configuration
# Security-hardened configuration for production deployment

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# =============================================================================
# LOCAL CONNECTIONS (Unix domain sockets)
# =============================================================================

# "local" is for Unix domain socket connections only
local   all             postgres                                peer
local   all             all                                     scram-sha-256

# =============================================================================
# IPv4 LOCAL CONNECTIONS
# =============================================================================

# IPv4 local connections:
host    all             postgres        127.0.0.1/32            scram-sha-256
host    all             postgres        ::1/128                 scram-sha-256

# =============================================================================
# DOCKER NETWORK CONNECTIONS
# =============================================================================

# Docker network connections (secure-network subnet)
# Application database user
host    agent_system    agent_user      172.20.0.0/16          scram-sha-256

# Monitoring connections
host    agent_system    monitoring_user 172.20.0.0/16          scram-sha-256

# Backup connections
host    agent_system    backup_user     172.20.0.0/16          scram-sha-256

# =============================================================================
# REPLICATION CONNECTIONS
# =============================================================================

# Replication connections (for high availability)
host    replication     replicator      172.20.0.0/16          scram-sha-256

# =============================================================================
# ADMINISTRATIVE CONNECTIONS
# =============================================================================

# Database administrator connections (restrict to specific IPs)
# host    all             dba_user        10.0.0.0/8              scram-sha-256
# host    all             dba_user        192.168.0.0/16          scram-sha-256

# =============================================================================
# SECURITY RULES
# =============================================================================

# Deny all other connections by default
# This should be the last line to ensure security
host    all             all             0.0.0.0/0               reject
host    all             all             ::/0                    reject

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
#
# Authentication Methods:
# - scram-sha-256: Most secure password authentication (recommended)
# - md5: Legacy password authentication (less secure, avoid)
# - peer: Use OS user authentication (local connections only)
# - trust: No authentication (NEVER use in production)
# - reject: Explicitly reject connections
#
# Address Formats:
# - 127.0.0.1/32: Single IPv4 address
# - 172.20.0.0/16: Docker network subnet
# - 0.0.0.0/0: All IPv4 addresses
# - ::1/128: Single IPv6 address
# - ::/0: All IPv6 addresses
#
# Security Best Practices Applied:
# 1. Use scram-sha-256 for all password authentication
# 2. Restrict connections to specific networks/subnets
# 3. Create dedicated users for different purposes
# 4. Explicitly reject all other connections
# 5. Use peer authentication for local postgres user
# 6. Separate users for application, monitoring, and backup
#
# Database Users to Create:
# - postgres: Superuser (local connections only)
# - agent_user: Application database user (limited privileges)
# - monitoring_user: Read-only user for monitoring
# - backup_user: Backup operations user
# - replicator: Replication user (if using replication)
#
# Required PostgreSQL User Creation Commands:
# CREATE USER agent_user WITH PASSWORD 'strong_password' NOSUPERUSER NOCREATEDB NOCREATEROLE;
# CREATE USER monitoring_user WITH PASSWORD 'monitoring_password' NOSUPERUSER NOCREATEDB NOCREATEROLE;
# CREATE USER backup_user WITH PASSWORD 'backup_password' NOSUPERUSER NOCREATEDB NOCREATEROLE;
# CREATE USER replicator WITH REPLICATION PASSWORD 'replication_password';
#
# Grant appropriate permissions:
# GRANT CONNECT ON DATABASE agent_system TO agent_user;
# GRANT USAGE ON SCHEMA public TO agent_user;
# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO agent_user;
# GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO agent_user;
#
# For monitoring user:
# GRANT CONNECT ON DATABASE agent_system TO monitoring_user;
# GRANT USAGE ON SCHEMA public TO monitoring_user;
# GRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring_user;
# GRANT pg_monitor TO monitoring_user;
#
# Remember to reload PostgreSQL configuration after changes:
# SELECT pg_reload_conf();