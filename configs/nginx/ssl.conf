# SSL/TLS Configuration for Nginx
# Security-hardened SSL configuration for 6FB AI Agent System

# =============================================================================
# SSL PROTOCOL AND CIPHER CONFIGURATION
# =============================================================================

# Enable only secure SSL/TLS protocols
ssl_protocols TLSv1.2 TLSv1.3;

# Prefer server ciphers over client ciphers
ssl_prefer_server_ciphers on;

# Define secure cipher suites (prioritizing TLS 1.3 and modern TLS 1.2 ciphers)
ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;

# Enable ECDH curve for perfect forward secrecy
ssl_ecdh_curve secp384r1;

# =============================================================================
# SSL SESSION CONFIGURATION
# =============================================================================

# SSL session cache settings for performance
ssl_session_cache shared:SSL:50m;
ssl_session_timeout 1d;

# Disable SSL session tickets (for better security)
ssl_session_tickets off;

# =============================================================================
# SSL OPTIMIZATION
# =============================================================================

# SSL buffer size for optimal performance
ssl_buffer_size 4k;

# =============================================================================
# CERTIFICATE CONFIGURATION
# =============================================================================

# SSL certificate files (to be mounted in Docker container)
# ssl_certificate /etc/nginx/certs/cert.pem;
# ssl_private_key /etc/nginx/certs/key.pem;

# Certificate chain (if using intermediate certificates)
# ssl_trusted_certificate /etc/nginx/certs/chain.pem;

# =============================================================================
# OCSP STAPLING
# =============================================================================

# Enable OCSP stapling for better SSL performance
ssl_stapling on;
ssl_stapling_verify on;

# DNS resolver for OCSP stapling
resolver 8.8.8.8 8.8.4.4 1.1.1.1 1.0.0.1 valid=300s;
resolver_timeout 5s;

# =============================================================================
# DH PARAMETERS
# =============================================================================

# Custom DH parameters for DHE ciphers (generate with: openssl dhparam -out dhparam.pem 2048)
# ssl_dhparam /etc/nginx/certs/dhparam.pem;

# =============================================================================
# SSL SECURITY HEADERS
# =============================================================================

# HTTP Strict Transport Security (HSTS)
# This is also set in security.conf but included here for SSL-specific context
# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# =============================================================================
# CLIENT CERTIFICATE AUTHENTICATION (Optional)
# =============================================================================

# Enable client certificate authentication if needed
# ssl_client_certificate /etc/nginx/certs/ca.pem;
# ssl_verify_client optional;

# =============================================================================
# SSL LOGGING
# =============================================================================

# Log SSL handshake errors
error_log /var/log/nginx/ssl_error.log;

# =============================================================================
# TLS 1.3 SPECIFIC CONFIGURATION
# =============================================================================

# TLS 1.3 ciphersuites (modern browsers)
ssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;

# Early data (0-RTT) - disabled for security
ssl_early_data off;

# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================

# Disable weak ciphers and protocols
ssl_ciphers !aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA;

# =============================================================================
# MONITORING AND DEBUGGING
# =============================================================================

# SSL variables for logging (available in access logs)
# $ssl_protocol - SSL protocol version
# $ssl_cipher - SSL cipher used
# $ssl_session_id - SSL session ID
# $ssl_session_reused - Whether SSL session was reused
# $ssl_server_name - Server name indication (SNI)
# $ssl_client_cert - Client certificate
# $ssl_client_fingerprint - Client certificate fingerprint

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# Worker connections optimization for SSL
worker_rlimit_nofile 65535;

# =============================================================================
# CERTIFICATE MANAGEMENT
# =============================================================================

# Example Let's Encrypt certificate paths (adjust as needed)
# ssl_certificate /etc/letsencrypt/live/agent.6fb.ai/fullchain.pem;
# ssl_private_key /etc/letsencrypt/live/agent.6fb.ai/privkey.pem;

# =============================================================================
# MULTI-DOMAIN CERTIFICATE SUPPORT
# =============================================================================

# Support for multiple domains with SNI
# map $ssl_server_name $ssl_certificate {
#     default /etc/nginx/certs/default.pem;
#     agent.6fb.ai /etc/nginx/certs/agent.6fb.ai.pem;
#     staging-agent.6fb.ai /etc/nginx/certs/staging-agent.6fb.ai.pem;
# }

# map $ssl_server_name $ssl_certificate_key {
#     default /etc/nginx/certs/default.key;
#     agent.6fb.ai /etc/nginx/certs/agent.6fb.ai.key;
#     staging-agent.6fb.ai /etc/nginx/certs/staging-agent.6fb.ai.key;
# }

# =============================================================================
# WEBSOCKET SSL SUPPORT
# =============================================================================

# SSL settings for WebSocket connections
# (WebSocket connections inherit SSL settings from the main server block)

# =============================================================================
# SSL TEST AND VALIDATION
# =============================================================================

# Test SSL configuration with:
# openssl s_client -connect agent.6fb.ai:443 -servername agent.6fb.ai
# 
# Online SSL testing:
# https://www.ssllabs.com/ssltest/
# https://www.immuniweb.com/ssl/

# =============================================================================
# NOTES FOR PRODUCTION DEPLOYMENT
# =============================================================================

# 1. Certificate Management:
#    - Use Let's Encrypt for automated certificate renewal
#    - Or use commercial certificates from trusted CAs
#    - Ensure certificate includes all domains (SANs)
#
# 2. Security Considerations:
#    - Regularly update cipher suites based on security recommendations
#    - Monitor for SSL vulnerabilities and update accordingly
#    - Consider using HPKP (HTTP Public Key Pinning) for additional security
#
# 3. Performance Optimization:
#    - Use session caching to improve SSL handshake performance
#    - Enable OCSP stapling to reduce certificate validation time
#    - Consider using faster cipher suites like ChaCha20-Poly1305
#
# 4. Monitoring:
#    - Monitor SSL certificate expiration dates
#    - Set up alerts for SSL handshake failures
#    - Regularly test SSL configuration
#
# 5. Compliance:
#    - Ensure SSL configuration meets PCI DSS requirements if handling payments
#    - Consider FIPS 140-2 compliance for government/healthcare applications
#
# 6. Certificate Transparency:
#    - Monitor certificate transparency logs for unauthorized certificates
#    - Consider implementing Certificate Authority Authorization (CAA) DNS records

# =============================================================================
# EXAMPLE PRODUCTION SSL BLOCK
# =============================================================================

# Example of how to use this configuration in a server block:
#
# server {
#     listen 443 ssl http2;
#     server_name agent.6fb.ai;
#     
#     # Include this SSL configuration
#     include /etc/nginx/conf.d/ssl.conf;
#     
#     # Specify certificate files
#     ssl_certificate /etc/nginx/certs/agent.6fb.ai.pem;
#     ssl_private_key /etc/nginx/certs/agent.6fb.ai.key;
#     
#     # Your application configuration...
# }