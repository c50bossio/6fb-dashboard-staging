# Nginx Security Configuration
# Comprehensive security headers and settings for 6FB AI Agent System

# =============================================================================
# SECURITY HEADERS
# =============================================================================

# Content Security Policy (CSP)
# Comprehensive CSP to prevent XSS and injection attacks
add_header Content-Security-Policy "
    default-src 'self';
    script-src 'self' 'unsafe-inline' 'unsafe-eval' 
        https://cdn.jsdelivr.net 
        https://unpkg.com 
        https://cdnjs.cloudflare.com
        https://www.googletagmanager.com
        https://www.google-analytics.com;
    style-src 'self' 'unsafe-inline' 
        https://fonts.googleapis.com 
        https://cdn.jsdelivr.net;
    font-src 'self' 
        https://fonts.gstatic.com 
        data:;
    img-src 'self' 
        data: 
        https: 
        blob:
        https://www.google-analytics.com;
    connect-src 'self' 
        https://api.openai.com 
        https://api.anthropic.com
        https://api.google.com
        wss://agent.6fb.ai
        ws://localhost:*;
    media-src 'self' 
        data: 
        blob:;
    object-src 'none';
    base-uri 'self';
    frame-ancestors 'none';
    form-action 'self';
    upgrade-insecure-requests;
    block-all-mixed-content;
" always;

# HTTP Strict Transport Security (HSTS)
# Force HTTPS for all future requests
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# X-Content-Type-Options
# Prevent MIME type sniffing
add_header X-Content-Type-Options "nosniff" always;

# X-Frame-Options
# Prevent clickjacking attacks
add_header X-Frame-Options "DENY" always;

# X-XSS-Protection
# Enable XSS filtering in browsers
add_header X-XSS-Protection "1; mode=block" always;

# Referrer Policy
# Control referrer information sent with requests
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Permissions Policy (formerly Feature Policy)
# Control browser features and APIs
add_header Permissions-Policy "
    geolocation=(),
    microphone=(),
    camera=(),
    magnetometer=(),
    gyroscope=(),
    speaker=(),
    vibrate=(),
    fullscreen=(self),
    payment=()
" always;

# Cross-Origin Embedder Policy
add_header Cross-Origin-Embedder-Policy "require-corp" always;

# Cross-Origin Opener Policy
add_header Cross-Origin-Opener-Policy "same-origin" always;

# Cross-Origin Resource Policy
add_header Cross-Origin-Resource-Policy "cross-origin" always;

# =============================================================================
# SERVER SECURITY
# =============================================================================

# Hide Nginx version and server information
server_tokens off;
more_clear_headers Server;
more_set_headers "Server: 6FB-AI-Agent-System";

# =============================================================================
# REQUEST FILTERING AND VALIDATION
# =============================================================================

# Block requests with suspicious user agents
if ($http_user_agent ~ "sqlmap|nikto|wikto|sf|sqlninja|fimap|nessus|whatweb|Openvas|joomscan|w3af|webalizer|nmap|netsparker|acunetix|arachni|shodan") {
    return 444;
}

# Block requests with suspicious referers
if ($http_referer ~ "porn|viagra|casino|gambling|dating") {
    return 444;
}

# Block common attack patterns in URL
if ($request_uri ~ "(\.\./|\.\.\%2F|\%2e\%2e/|\%2e\%2e\%2f|~|`|<|>|\||\{|\}|\[|\]|;|,|\$|\%|@|\+|=|\^)") {
    return 444;
}

# Block SQL injection attempts
if ($args ~ "union.*select.*\(|union.*all.*select.*|union.*distinct.*select.*|select.*from.*information_schema|select.*from.*sysobjects|select.*from.*sysindexes") {
    return 444;
}

# Block XSS attempts
if ($args ~ "<script.*>.*</script>|javascript:|vbscript:|onload|onerror|onclick") {
    return 444;
}

# Block common exploit attempts
if ($args ~ "proc/self/environ|mosconfig_[a-za-z_]{1,21}(=|\%3d)|base64_encode.*\(.*\)|benchmark\(.*\)|boot\.ini|etc/passwd|var/log") {
    return 444;
}

# =============================================================================
# METHOD RESTRICTIONS
# =============================================================================

# Only allow specific HTTP methods
if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS|PATCH)$) {
    return 405;
}

# =============================================================================
# FILE ACCESS RESTRICTIONS
# =============================================================================

# Block access to hidden files and directories
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

# Block access to backup files
location ~ ~$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Block access to configuration files
location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf|bak|old|tmp)$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Block access to source code files
location ~* \.(md|txt|json|yaml|yml)$ {
    deny all;
    access_log off;
    log_not_found off;
}

# =============================================================================
# RATE LIMITING ZONES
# =============================================================================

# Define rate limiting zones (declared in main nginx.conf)
# limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
# limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
# limit_req_zone $binary_remote_addr zone=general:10m rate=200r/m;

# Additional rate limiting for specific endpoints
limit_req_zone $binary_remote_addr zone=register:10m rate=2r/m;
limit_req_zone $binary_remote_addr zone=password_reset:10m rate=1r/m;
limit_req_zone $binary_remote_addr zone=file_upload:10m rate=10r/m;

# =============================================================================
# CONNECTION LIMITS
# =============================================================================

# Limit concurrent connections per IP
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
# limit_conn conn_limit_per_ip 20; (applied in main config)

# =============================================================================
# TIMEOUT SETTINGS
# =============================================================================

# Client timeouts
client_body_timeout 12s;
client_header_timeout 12s;
send_timeout 10s;

# Keep-alive timeout
keepalive_timeout 65s;
keepalive_requests 100;

# =============================================================================
# BUFFER LIMITS
# =============================================================================

# Client buffer limits
client_body_buffer_size 16K;
client_header_buffer_size 1k;
large_client_header_buffers 4 8k;
client_max_body_size 10M;

# =============================================================================
# LOG SECURITY EVENTS
# =============================================================================

# Log format for security events
log_format security_events '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '"$http_x_forwarded_for" "$request_id" '
                           '"$ssl_protocol" "$ssl_cipher" '
                           'blocked="$sent_http_x_blocked_reason"';

# =============================================================================
# CUSTOM ERROR RESPONSES
# =============================================================================

# Custom error pages to avoid information disclosure
error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /error.html;
error_page 500 501 502 503 504 505 506 507 508 510 511 /error.html;

# =============================================================================
# GEOIP BLOCKING (if GeoIP module is available)
# =============================================================================

# Example GeoIP blocking (uncomment if needed)
# map $geoip_country_code $allowed_country {
#     default no;
#     US yes;
#     CA yes;
#     GB yes;
#     DE yes;
#     FR yes;
# }

# if ($allowed_country = no) {
#     return 403;
# }

# =============================================================================
# REAL IP CONFIGURATION
# =============================================================================

# Set real IP from trusted proxies
set_real_ip_from 10.0.0.0/8;
set_real_ip_from 172.16.0.0/12;
set_real_ip_from 192.168.0.0/16;
set_real_ip_from 127.0.0.1/32;

# Real IP header
real_ip_header X-Forwarded-For;
real_ip_recursive on;

# =============================================================================
# ADDITIONAL SECURITY MEASURES
# =============================================================================

# Disable TRACE method
if ($request_method = TRACE) {
    return 405;
}

# Block requests with no User-Agent
if ($http_user_agent = "") {
    return 444;
}

# Block requests with empty or suspicious Accept headers
if ($http_accept !~ "text/html|application/json|application/xml|\*/\*") {
    return 444;
}

# =============================================================================
# MONITORING AND ALERTING
# =============================================================================

# Access log for security monitoring
access_log /var/log/nginx/security.log security_events;

# =============================================================================
# NOTES
# =============================================================================

# This configuration provides comprehensive security hardening for Nginx:
#
# 1. Security Headers: Comprehensive set of security headers to prevent
#    common web attacks (XSS, CSRF, clickjacking, etc.)
#
# 2. Request Filtering: Blocks malicious requests, SQL injection attempts,
#    XSS attempts, and common exploit patterns
#
# 3. Rate Limiting: Prevents brute force attacks and API abuse
#
# 4. File Access Control: Blocks access to sensitive files and directories
#
# 5. Method Restrictions: Only allows safe HTTP methods
#
# 6. Buffer and Timeout Limits: Prevents resource exhaustion attacks
#
# 7. Custom Error Pages: Prevents information disclosure through error messages
#
# 8. Logging: Comprehensive security event logging for monitoring
#
# Remember to:
# - Regularly update this configuration based on new threats
# - Monitor security logs for blocked requests and attacks
# - Adjust rate limits based on legitimate traffic patterns
# - Test all changes in a staging environment first