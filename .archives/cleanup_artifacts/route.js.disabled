// Enhanced OAuth callback with secure state management and PKCE support
import { createClient } from '@/lib/supabase/server-client'
import { NextResponse } from 'next/server'

// Force Node.js runtime to support Supabase dependencies
export const runtime = 'nodejs'

/**
 * Validate OAuth state parameter on server side
 * This is a simplified validation since we can't access sessionStorage on server
 * The main validation happens on client side in oauth-session.js
 */
function validateOAuthState(state, origin) {
  if (!state) return false
  
  // Basic validation - state should be a reasonable length secure string
  if (typeof state !== 'string' || state.length < 20 || state.length > 100) {
    console.warn('OAuth state parameter invalid length')
    return false
  }
  
  // Check for basic security patterns (alphanumeric + some symbols)
  if (!/^[a-zA-Z0-9._-]+$/.test(state)) {
    console.warn('OAuth state parameter contains invalid characters')
    return false
  }
  
  return true
}

export async function GET(request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const state = requestUrl.searchParams.get('state')
  const next = requestUrl.searchParams.get('next') || '/dashboard'
  const origin = requestUrl.origin

  console.log('üîÑ OAuth callback received:', { 
    hasCode: !!code, 
    hasState: !!state,
    state: state?.substring(0, 8) + '...' || 'none'
  })

  if (code) {
    const supabase = createClient()
    
    try {
      // Exchange code for session using PKCE
      console.log('üîë Exchanging OAuth code for session...')
      const { error: exchangeError } = await supabase.auth.exchangeCodeForSession(code)
      
      if (exchangeError) {
        console.error('‚ùå OAuth exchange error:', exchangeError.message)
        return NextResponse.redirect(`${origin}/login?error=oauth_exchange_failed&message=${encodeURIComponent(exchangeError.message)}`)
      }
      
      // Get authenticated user
      const { data: { user }, error: userError } = await supabase.auth.getUser()
      
      if (userError || !user) {
        console.error('‚ùå Failed to get user after OAuth exchange:', userError?.message)
        return NextResponse.redirect(`${origin}/login?error=user_fetch_failed`)
      }
      
      console.log('‚úÖ OAuth exchange successful for user:', user.email)
      
      // Check if user exists in our profiles table (correct table)
      const { data: userData, error: userDataError } = await supabase
        .from('profiles')
        .select('subscription_status, onboarding_completed, role')
        .eq('id', user.id)
        .single()
      
      // If user doesn't exist, create them in profiles table
      if (!userData) {
        console.log('üë§ Creating new user profile...')
        const { error: createError } = await supabase.from('profiles').insert({
          id: user.id,
          email: user.email,
          full_name: user.user_metadata?.full_name || user.email?.split('@')[0],
          role: 'SHOP_OWNER',
          created_at: new Date().toISOString()
        })
        
        if (createError) {
          console.error('‚ùå Failed to create user profile:', createError.message)
          // Continue anyway - user exists in auth, just not in our table
        } else {
          console.log('‚úÖ User profile created successfully')
        }
      }
      
      // Check subscription status
      const hasActiveSubscription = userData?.subscription_status === 'active'
      const needsOnboarding = !userData?.onboarding_completed
      
      console.log('üìä User status:', {
        hasActiveSubscription,
        needsOnboarding,
        email: user.email
      })
      
      // Handle OAuth state for plan selection
      if (state && validateOAuthState(state, origin)) {
        console.log('üîí OAuth state parameter detected - user had plan selection')
        
        // For security, we'll redirect to a client-side handler that can validate
        // the state against sessionStorage and process the plan selection
        const stateParams = new URLSearchParams({
          state: state,
          oauth_success: 'true'
        }).toString()
        
        return NextResponse.redirect(`${origin}/subscribe/oauth-complete?${stateParams}`)
      }
      
      // Standard OAuth flow without plan selection
      if (!hasActiveSubscription) {
        console.log('üí≥ No active subscription - redirecting to pricing')
        return NextResponse.redirect(`${origin}/subscribe?source=oauth_callback`)
      }
      
      if (needsOnboarding) {
        console.log('üöÄ Has subscription but needs onboarding')
        return NextResponse.redirect(`${origin}/welcome`)
      }
      
      // User is fully set up - go to dashboard
      console.log('üè† User fully authenticated - redirecting to dashboard')
      return NextResponse.redirect(`${origin}${next}`)
      
    } catch (error) {
      console.error('‚ùå Unexpected error in OAuth callback:', error)
      return NextResponse.redirect(`${origin}/login?error=unexpected_error&message=${encodeURIComponent(error.message)}`)
    }
  }

  // No code present - invalid OAuth callback
  console.warn('‚ö†Ô∏è OAuth callback called without code parameter')
  return NextResponse.redirect(`${origin}/login?error=missing_oauth_code`)
}