import { NextResponse } from 'next/server'
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function GET(request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const origin = requestUrl.origin
  const cookieStore = cookies()

  if (code) {
    // Create a Supabase client with proper cookie handling for PKCE
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          get(name) {
            return cookieStore.get(name)?.value
          },
          set(name, value, options) {
            try {
              cookieStore.set({ name, value, ...options })
            } catch (error) {
              // Cookie setting may fail in some contexts, that's ok
            }
          },
          remove(name, options) {
            try {
              cookieStore.set({ name, value: '', ...options })
            } catch (error) {
              // Cookie removal may fail in some contexts, that's ok
            }
          },
        },
      }
    )
    
    // Exchange code for session
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    
    if (error) {
      console.error('OAuth callback error:', error.message)
      return NextResponse.redirect(`${origin}/login?error=oauth_failed`)
    }
    
    // Get the user after successful exchange
    const { data: { user } } = await supabase.auth.getUser()
    
    if (user) {
      // Check onboarding status
      const { data: profile } = await supabase
        .from('profiles')
        .select('onboarding_completed')
        .eq('email', user.email)
        .single()

      // Route based on onboarding
      if (profile?.onboarding_completed) {
        return NextResponse.redirect(`${origin}/dashboard`)
      } else {
        return NextResponse.redirect(`${origin}/welcome`)
      }
    }
  }

  // No code provided - redirect to login
  return NextResponse.redirect(`${origin}/login`)
}