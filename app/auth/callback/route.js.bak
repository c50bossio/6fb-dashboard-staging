import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { createClient as createSimpleClient } from '@/lib/supabase/server-client'

/**
 * Clean OAuth callback handler for Google authentication
 * Handles both new users and existing subscribers properly
 */
export async function GET(request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  const error = searchParams.get('error')
  const state = searchParams.get('state')
  
  console.log('üîê OAuth Callback Started:', {
    hasCode: !!code,
    hasError: !!error,
    hasState: !!state,
    origin
  })

  // Handle OAuth provider errors first
  if (error) {
    console.error('‚ùå OAuth Provider Error:', error)
    return redirectToLogin('oauth_provider_error', origin)
  }

  // No code means invalid callback
  if (!code) {
    console.error('‚ùå No authorization code received')
    return redirectToLogin('no_auth_code', origin)
  }

  try {
    // Enhanced PKCE debugging - inspect all available cookies FIRST
    console.log('üîÑ Exchanging OAuth code for session...')
    console.log('üîç PKCE Debug - Checking all cookies:')
    
    const cookieStore = cookies()
    const allCookies = cookieStore.getAll()
    
    console.log(`üìä Total cookies found: ${allCookies.length}`)
    
    // Log ALL cookies to see what's available
    allCookies.forEach(cookie => {
      console.log(`  üç™ ${cookie.name}: ${cookie.value ? `${cookie.value.substring(0, 30)}...` : 'empty'}`)
    })
    
    // Check for PKCE cookies specifically
    const pkceCookies = allCookies.filter(c => 
      c.name.includes('pkce') || 
      c.name.includes('code-verifier') || 
      c.name.includes('verifier') ||
      c.name.includes('supabase.auth')
    )
    
    console.log(`üîê PKCE-related cookies found: ${pkceCookies.length}`)
    pkceCookies.forEach(cookie => {
      console.log(`  üîë PKCE Cookie: ${cookie.name}`)
    })
    
    // If no PKCE cookies found, this is the problem
    if (pkceCookies.length === 0) {
      console.log('‚ö†Ô∏è WARNING: No PKCE cookies found! This will cause authentication to fail.')
      console.log('üîç Attempting authentication anyway...')
    }
    
    // Try with both client implementations to handle PKCE properly
    let supabase = createClient()
    
    let authData, authError
    
    // First attempt with enhanced client
    console.log('üîê Attempting code exchange with enhanced client...')
    const result1 = await supabase.auth.exchangeCodeForSession(code)
    authData = result1.data
    authError = result1.error
    
    if (authError) {
      console.log('‚ùå First attempt failed:', authError.message)
    }
    
    // If PKCE fails, try with simple client as fallback
    if (authError && (authError.message?.includes('code verifier') || authError.message?.includes('PKCE'))) {
      console.log('üîß First attempt failed with PKCE issue, trying simple client...')
      supabase = createSimpleClient()
      const result2 = await supabase.auth.exchangeCodeForSession(code)
      authData = result2.data
      authError = result2.error
    }
    
    // Handle authentication failures
    if (authError) {
      console.error('‚ùå Code Exchange Failed:', {
        message: authError.message,
        code: authError.code,
        status: authError.status
      })
      
      // Special handling for PKCE code verifier issues
      if (authError.message?.includes('code verifier') || authError.code === 'validation_failed') {
        console.log('üîß PKCE issue detected - attempting direct session recovery...')
        
        // Try alternative auth flow for PKCE failures
        try {
          // Clear any stale auth state
          await supabase.auth.signOut()
          console.log('üßπ Cleared stale auth state, redirecting for fresh OAuth attempt')
          
          const loginUrl = new URL('/login', origin)
          loginUrl.searchParams.set('error', 'oauth_retry_needed')
          loginUrl.searchParams.set('message', 'Please try signing in again')
          return NextResponse.redirect(loginUrl.toString())
        } catch (clearError) {
          console.warn('‚ö†Ô∏è Could not clear auth state:', clearError.message)
        }
      }
      
      return handleAuthError(authError, origin)
    }

    // Ensure we have a valid session
    if (!authData?.session?.user) {
      console.error('‚ùå No valid session returned from code exchange')
      return redirectToLogin('no_session_data', origin)
    }

    const { session, user } = authData
    console.log('‚úÖ Session Created Successfully:', {
      userEmail: user.email,
      userId: user.id,
      hasAccessToken: !!session.access_token,
      hasRefreshToken: !!session.refresh_token
    })

    // Check user's profile and subscription status
    return await handleAuthententicatedUser(supabase, user, origin)
    
  } catch (error) {
    console.error('üí• Unexpected OAuth Callback Error:', error)
    return redirectToLogin('callback_exception', origin)
  }
}

/**
 * Handle different authentication error types
 */
function handleAuthError(authError, origin) {
  // Code verifier issues (PKCE flow problems)
  if (authError.message.includes('code verifier') || authError.code === 'invalid_request') {
    console.log('üîç PKCE Code Verifier Issue - User needs to retry OAuth')
    return redirectToLogin('oauth_session_error', origin, true)
  }

  // Expired OAuth flow
  if (authError.code === 'flow_state_expired' || authError.code === 'flow_state_not_found') {
    console.log('‚è∞ OAuth Flow Expired - User needs fresh OAuth')
    return redirectToLogin('oauth_expired', origin, true)
  }

  // Other authentication failures
  console.log('‚ö†Ô∏è General Authentication Failure')
  return redirectToLogin('auth_failed', origin, true)
}

/**
 * Handle successfully authenticated user - route based on profile status
 */
async function handleAuthententicatedUser(supabase, user, origin) {
  console.log('üë§ Looking up user profile for:', user.email)
  
  try {
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select(`
        id, 
        email, 
        role, 
        subscription_status, 
        stripe_customer_id, 
        shop_name, 
        onboarding_completed
      `)
      .eq('email', user.email)
      .single()

    if (profileError) {
      console.log('üìù Profile Query Error (might be new user):', profileError.message)
      return handleNewUser(origin)
    }

    if (!profile) {
      console.log('üë§ No profile found - treating as new user')
      return handleNewUser(origin)
    }

    console.log('üìã User Profile Found:', {
      email: profile.email,
      role: profile.role,
      subscriptionStatus: profile.subscription_status,
      hasStripeCustomerId: !!profile.stripe_customer_id,
      onboardingCompleted: profile.onboarding_completed
    })

    return routeExistingUser(profile, origin)

  } catch (error) {
    console.error('üí• Profile Lookup Error:', error)
    return handleNewUser(origin)
  }
}

/**
 * Route existing user based on their subscription and onboarding status
 */
function routeExistingUser(profile, origin) {
  // Check onboarding status first - this is critical for the user experience
  if (!profile.onboarding_completed) {
    console.log('‚ö†Ô∏è User needs to complete onboarding ‚Üí Welcome page')
    console.log('   Profile:', profile.email)
    console.log('   Subscription Status:', profile.subscription_status)
    console.log('   Onboarding Completed:', profile.onboarding_completed)
    
    // Force redirect to welcome page for onboarding
    const welcomeUrl = new URL('/welcome', origin)
    welcomeUrl.searchParams.set('from', 'oauth_success')
    welcomeUrl.searchParams.set('email', profile.email)
    welcomeUrl.searchParams.set('needs_onboarding', 'true')
    return NextResponse.redirect(welcomeUrl.toString())
  }
  
  // Active subscription with completed onboarding
  if (profile.subscription_status === 'active') {
    console.log('‚úÖ Active subscriber with completed onboarding ‚Üí Dashboard')
    return NextResponse.redirect(new URL('/dashboard', origin))
  }

  // User has Stripe customer ID but inactive subscription
  if (profile.stripe_customer_id) {
    console.log('üí≥ Previous subscriber with inactive subscription ‚Üí Dashboard with notice')
    return NextResponse.redirect(new URL('/dashboard?subscription_status=inactive', origin))
  }

  // User exists but never had a subscription
  console.log('üë§ Existing user without subscription history ‚Üí Welcome flow')
  return NextResponse.redirect(new URL('/welcome?from=oauth_success', origin))
}

/**
 * Handle new user signup flow
 */
function handleNewUser(origin) {
  console.log('üÜï New user signup ‚Üí Checkout flow')
  const checkoutUrl = new URL('/api/stripe/checkout', origin)
  checkoutUrl.searchParams.set('plan', 'shop')
  checkoutUrl.searchParams.set('billing', 'monthly')
  return NextResponse.redirect(checkoutUrl.toString())
}

/**
 * Consistent login redirect helper
 */
function redirectToLogin(errorType, origin, retry = false) {
  const loginUrl = new URL('/login', origin)
  loginUrl.searchParams.set('error', errorType)
  if (retry) {
    loginUrl.searchParams.set('retry', 'true')
  }
  
  console.log(`üîÑ Redirecting to login with error: ${errorType}`)
  return NextResponse.redirect(loginUrl.toString())
}