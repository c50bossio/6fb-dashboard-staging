# Docker Compose for 6FB AI Agent System Monitoring Stack
# Comprehensive monitoring with Prometheus, Grafana, and Alertmanager

version: '3.8'

networks:
  monitoring:
    driver: bridge
  agent-network:
    external: true  # Connect to main application network

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: 6fb-prometheus
    restart: unless-stopped
    networks:
      - monitoring
      - agent-network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    user: "65534:65534"
    environment:
      - PROMETHEUS_RETENTION=30d

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: 6fb-grafana
    restart: unless-stopped
    networks:
      - monitoring
      - agent-network
    ports:
      - "3001:3000"  # Use 3001 to avoid conflict with frontend
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_LOG_LEVEL=info
      - GF_SMTP_ENABLED=false
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    user: "472:472"

  # Alertmanager - Alert routing and notification
  alertmanager:
    image: prom/alertmanager:latest
    container_name: 6fb-alertmanager
    restart: unless-stopped
    networks:
      - monitoring
      - agent-network
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    user: "65534:65534"

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: 6fb-node-exporter
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /run/systemd/private:/run/systemd/private:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    pid: host
    user: "65534:65534"

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: 6fb-cadvisor
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    command:
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--allow_dynamic_housekeeping=true'
      - '--global_housekeeping_interval=30s'
      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,hugetlb,referenced_memory,cpu_topology,resctrl'

  # Blackbox Exporter - External endpoint monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: 6fb-blackbox-exporter
    restart: unless-stopped
    networks:
      - monitoring
      - agent-network
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox:/etc/blackbox_exporter
    command:
      - '--config.file=/etc/blackbox_exporter/blackbox.yml'
      - '--web.listen-address=:9115'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9115/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: 6fb-postgres-exporter
    restart: unless-stopped
    networks:
      - monitoring
      - agent-network
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://barbershop:${POSTGRES_PASSWORD}@postgres:5432/barbershop_ai?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    volumes:
      - ./postgres-exporter:/etc/postgres_exporter
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter - Cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: 6fb-redis-exporter
    restart: unless-stopped
    networks:
      - monitoring
      - agent-network
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation (optional)
  # loki:
  #   image: grafana/loki:latest
  #   container_name: 6fb-loki
  #   restart: unless-stopped
  #   networks:
  #     - monitoring
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ./loki:/etc/loki
  #   command:
  #     - '-config.file=/etc/loki/loki.yml'

  # Jaeger - Distributed tracing (optional)
  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: 6fb-jaeger
  #   restart: unless-stopped
  #   networks:
  #     - monitoring
  #   ports:
  #     - "14268:14268"
  #     - "16686:16686"
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true